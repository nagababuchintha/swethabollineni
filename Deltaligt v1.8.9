<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8" />
    <!--back when i did this on webmaker-->
    <style>
    #mainCanvas {
  background: rgba(0,0,0,0);
  transition: 2s;
  z-index: 9999;
  position: absolute;
}
        
#backgroundCanvas {
  background: #222;
  top: 0;
  left: 0;
  z-index: 0;
  margin-left: -8px;
  margin-top: -8px
}

html {
  overflow: visible;
  background: black
}

/* width */
::-webkit-scrollbar {
  width: 10px; 
  height: 10px;
}

/* Track */
::-webkit-scrollbar-track {
  background: black;
}

/* Handle */
::-webkit-scrollbar-thumb {
  background: black;
  border-left: 2px solid white;
  border-top: 2px solid white;
}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: white;
}

.theFinale {
  background: linear-gradient(56deg, rgba(158, 1, 255, 1) 0%, rgba(185, 170, 255, 1) 40%, rgba(0, 0, 0, 1) 40%, rgba(51, 51, 51, 1) 60%, rgba(185, 170, 255, 1) 60%, rgba(158, 1, 255, 1) 100%);
  background-repeat: repeat;
  background-size: 200% 200%;
  animation: gradient 2s infinite ease;
  height: 100vh;
}

@keyframes gradient {
  0% {
    background-position: -0% -0%;
  }

  25% {
    background-position: 50% 100%;
  }

  75% {
    background-position: 100% 100%;
  }

  100% {
    background-position: 0% 0%;
  }
}
    </style>
</head>
<!-- background: linear-gradient(to right, #101821 0%,#16202f 50%,#101821 100%); -->

<body style='background: linear-gradient(to right, #242424 0%,#333333 50%,#242424 100%)'>
    <title>deltalight v1.8.9</title>
    <link rel="icon" type="image/x-icon" href="/images/favicon.ico">
    <canvas class='' width='950' height='730' id="mainCanvas"> </canvas>
    <canvas id="backgroundCanvas" style='background: black'> </canvas>
    
</body>

</html>


        let version = 'v1.8.9'
        let devMode = false
        // all this does is make the bosses health lower and amount of enemies needed to be destroyed way less
        //it basically makes the experience faster and easier for dev testing
        
        
        
        
        
        
        
        
        
        
        //----------
        // versions:
        //----------
        
        // v1.8.9:
        // fixed some bugs
        // fixed some false text
        // fixed the first boss
        // added the third boss
        // improved performance 
        // new work in progress class
        // made the hullbreaker do more damage while boosting
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        let { canvas, context } = kontra.init('mainCanvas')
        let background = document.getElementById('backgroundCanvas')
        let ctx = background.getContext('2d')
        background.width = window.innerWidth
        background.height = window.innerHeight
        let boss5Color = 'lightblue'

        /*
        repair the boss' health
        repair the amount of "neded enemies" in the checkForArenaUpdate function

		    make the background look like meteors or something like the "cool player trail effect" something like that
        */

        let particles = []
        let particles2 = []
        let maxParticles = 250
        let max2Particles = 250
        let hovering = false
        let overrideHover = false
        let currentBackgroundStatus = 'normal'
        

        let gameCompleted = kontra.getStoreItem('unkINF')

        function createParticles(
            x = kontra.randInt(0, background.width),
            y = background.height,
            w = 4,
            h = 10,
            color = boss5Color,
            speed = kontra.randInt(3, 20),
            radius = kontra.randInt(2, 10),
            opacity = kontra.randInt(.3, 1),
        ) {
            if (particles.length < maxParticles) {
                particles.push({
                    x: x,
                    y: y,
                    speed: speed,
                    radius: radius,
                    width: w,
                    height: h,
                    opacity: opacity,
                    color: color,
                    type: 'boss'
                })
            }
        }
        function createParticles2(
            x = kontra.randInt(0, background.width),
            y = kontra.randInt(0, background.height),
            w = 10,
            h = 4,
            color = 'grey',
            speed = kontra.randInt(3, 20),
            radius = kontra.randInt(2, 10),
            opacity = kontra.randInt(.3, 1),
        ) {
            if (particles.length < maxParticles) {
                if (x > background.width /2) {
                    finalX = background.width
                    finalSpeed = speed
                }
                else  {
                    finalX = 0
                    finalSpeed = -speed
                } 
                particles.push({
                    x: finalX,
                    y: y,
                    speed: finalSpeed,
                    radius: radius,
                    width: w,
                    height: h,
                    opacity: opacity,
                    color: color,
                    type: 'normal'
                })
            }
        }
        function drawParticles() {
            ctx.fillStyle = "black";
            ctx.fillRect(0, 0, background.width, background.height);
            for (var i in particles) {
                var part = particles[i];
                ctx.beginPath();
                ctx.globalAlpha = part.opacity
                //ctx.arc(part.x, part.y, part.radius, 0, Math.PI * 2);
                //ctx.rect(part.x,part.y,part.wh,part.wh)
                ctx.rect(part.x, part.y, part.width, part.height)
                //ctx.rotate(part.rotation)
                ctx.closePath();
                ctx.fillStyle = part.color;
                ctx.fill();
            }
        }
        function updateParticles() {
            for (var i in particles) {
                var part = particles[i];
                part.y -= part.speed + kontra.randInt(.3, .8);


                //part.x -= part.speed
            }
        }
        function killParticles() {
            for (var i in particles) {
                var part = particles[i];
                if (part.y > background.height) {
                    part.y = 0;
                    part.x = kontra.randInt(0, background.width)
                }
                if (part.y < 0) {
                    part.y = background.height

                }
                //if (part.x > background.width) part.x = 0
                if (part.x < 0) part.x = background.width
            }
        }
        function loop2() {
            if (kontra.getStoreItem('backgroundParticles'))window.requestAnimationFrame(loop2);
            createParticles()
            updateParticles();
            killParticles();
            drawParticles();
        }
        
        if (kontra.getStoreItem('backgroundParticles'))window.requestAnimationFrame(loop2)

        kontra.initInput()
        document.body.style.background = '#111'
        let ct = []// player trails
        let staticTiles = []
        let activeTiles = []
        let allies = []
        let enemies = []
        let bosses = []
        let arenaIndex = 1
        let bullets = []
        let enemyBullets = []
        let players = []
        let allyDrones = []
        let turrets = []
        let is = []
        let spawners = []
        let hoverText = []

        let cleanupBOSS1 = []
        let cleanupBOSS2 = []
        let cleanupBOSS3 = []
        let cleanupBOSS4 = []
        let cleanupBOSS5 = []

        let cleanupHealthbars = []

        let globalEnemy = {
            healthMult: 0,
            defenseMult: 0,
            speedMult: 0,
        }
        let globalAllyDrone = {
            proAmountjMult: 0,
            projSpeedMult: 0,
            damageMult: 0,
            firerateMult: 0,
        }
        let turretStats = {
            rotationSpeed: 2,
            damage: 10,
            attackSpeed: 40,
            spread: 10,
            ttl: 300,
            projSpeed: 4,
        }
        let mineStats = {
            damage: 100,
            ttl: 200,
            range: 200,
            ignite: false,
            shockwave: false,
        }
        let kills = kontra.getStoreItem('kills')
        let deaths = kontra.getStoreItem('deaths')
        let bossKills = kontra.getStoreItem('bossKills')
        let builtConstructs = kontra.getStoreItem('builtConstructs')
        let bulletsShot = kontra.getStoreItem('bulletsShot')
        let ignitedEnemies = kontra.getStoreItem('ignitedEnemies')
        let beatenGames = kontra.getStoreItem('beatenGames')
        if (kontra.getStoreItem('currency') == null) kontra.setStoreItem('currency',0)
        let currency = kontra.getStoreItem('currency')
        let neededEnemies = 15
        let amountTimesClicked = 0

        let boss1Spawned = false
        let boss1Killed = false

        let boss2Spawned = false
        let boss2Killed = false

        let boss3Spawned = false
        let boss3Killed = false

        let boss4Spawned = false
        let boss4Killed = false

        let boss5Spawned = false
        let boss5Killed = false

        let boss1looping = false
        let boss2looping = false
        let boss3looping = false
        let boss4looping = false
        let boss5looping = false
        
        let soundsPlaying = false
        
        let windAmount = 0

        var PI = Math.PI;
        var TAU = PI * 2;
        var toRad = PI / 180;
        var toDeg = 180 / PI;

        let maxDrones = 0 + kontra.getStoreItem('amountOwnedMaxDrones')
        let activeDrones = 0
        let droneModes = ['defense', 'defense', 'offense', 'offense', 'clingy']
        let droneClasses = [
            'flamethrower', 'flamethrower',
            'sniper', 'sniper',
            'minigunner', 'minigunner',
            'default', 'default', 'default', 'default', 'default'
        ]

        let maxTurrets = 0 + kontra.getStoreItem('amountOwnedMaxTurrets')
        let activeTurrets = 0
        let currentTargeting = null
        let turretClasses = [
            'fortress','fortress',
            'flamethrower',
            'minigunner','minigunner',
            'dual-gunner',
            'default', 'default','default'
        ]

        function normalTank(parent, w = 15, h = 15) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: w,
                height: h,
                color: '#bfaaff',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: .5,
                        range: 1,
                        attackSpeed: 1 / 500,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 25,
                        maxHealth: 25,
                        defense: 1 + globalEnemy.defenseMult,
                        healingSpeed: 0,
                        trigger: true,
                        speed: 0.6,
                        rotationSpeed: 0.5,
                        rewards: {
                            xp: 0,
                            cur: 2,
                        }
                    },
                }
            }
        }
        function normalHealer(parent, w = 15, h = 15) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: 15,
                height: 15,
                color: '#afa',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 1,
                        range: 1,
                        attackSpeed: 1 / 50,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 10,
                        maxHealth: 10,
                        defense: 0 + globalEnemy.defenseMult,
                        regen: 0,
                        trigger: true,
                        regenInterval: 1 / 500,
                        perRegen: 2,
                        speed: 1,
                        rotationSpeed: 2,
                        rewards: {
                            xp: 0,
                            cur: 1,
                        }
                    },
                }
            }
        }
        function normalB(parent, w = 13, h = 13) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: w,
                height: h,
                color: '#fff7aa',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 10,
                        range: 1,
                        attackSpeed: 1 / 50,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 5,
                        maxHealth: 5,
                        defense: 0,
                        healingSpeed: 0,
                        trigger: true,
                        speed: 1.3,
                        rotationSpeed: 1,
                        rewards: {
                            xp: 0,
                            cur: 2,
                        }
                    },
                }
            }
        }
        function normalSpeed(parent, w = 7, h = 7) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: w,
                height: h,
                color: 'skyblue',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: .2,
                        range: 2,
                        attackSpeed: 1 / 100,
                        atkSpeedDT: 0,
                    }, base: {
                        trigger: false,
                        health: 5,
                        maxHealth: 5,
                        defense: 0 + globalEnemy.defenseMult,
                        speed: 1.8,
                        rotationSpeed: .8,
                        rewards: {
                            c: 0.1,
                        }
                    },
                }
            }
        }
        function normalTeir2(parent) {
            return {
                        x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                        y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            },
                            weapons: {
                                damage: 2,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, 
                            base: {
                                health: 15,
                                maxHealth: 15,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,

                                speed: 0.3,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 2,
                                }
                            },
                        }
                    }
        }
        function tankTeir2(parent,w = 15, h = 15) {
            return {
                        x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                        y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                        width: w,
                        height: h,
                        color: '#bfaaff',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 4,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                advanced: true,
                                trigger: true,
                                health: 200,
                                maxHealth: 200,
                                defense: 0,
                                regen: 0,
                                regenInterval: 1 / 5000,
                                perRegen: 1,
                                speed: 0.6,
                                rotationSpeed: 0.8,
                                rewards: {
                                    xp: 0,
                                    c: 3,
                                }
                            },
                        }
                    }
        }
        function healerTier2(parent, w = 15, h = 15) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: 15,
                height: 15,
                color: '#afa',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 4,
                        range: 1,
                        attackSpeed: 1 / 50,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 50,
                        maxHealth: 10,
                        defense: 0 + globalEnemy.defenseMult,
                        regen: 0,
                        trigger: true,
                        regenInterval: 1 / 300,
                        perRegen: 2,
                        speed: 1,
                        rotationSpeed: 2,
                        rewards: {
                            xp: 0,
                            cur: 1,
                        }
                    },
                }
            }
        }
        function bTier2(parent, w = 13, h = 13) {
            return {
                x: kontra.randInt(parent.x - parent.width / 2, parent.x + parent.width / 2),
                y: kontra.randInt(parent.y - parent.height / 2, parent.y + parent.height / 2),
                width: w,
                height: h,
                color: '#fff7aa',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 20,
                        range: 1,
                        attackSpeed: 1 / 50,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 25,
                        maxHealth: 25,
                        defense: 0,
                        healingSpeed: 0,
                        trigger: true,
                        speed: 1.3,
                        rotationSpeed: 1,
                        rewards: {
                            xp: 0,
                            cur: 2,
                        }
                    },
                }
            }
        }
        //canvas.height = window.innerHeight
        //canvas.width = window.innerWidth
        let inter = (window.innerWidth / 2) - (canvas.width / 2)
        let inter2 = (window.innerHeight / 2) - (canvas.height / 2)
        window.addEventListener('resize', event => {
            inter = (window.innerWidth / 2) - (canvas.width / 2)
            inter2 = (window.innerHeight / 2) - (canvas.height / 2)
            canvas.style.transform = 'translate(' + inter + 'px,' + inter2 + 'px)'
            background.width = window.innerWidth
            background.height = window.innerHeight
        })
        window.addEventListener('click',event => {
            window.scrollTo(0, 0)
            if (!stopListenMusic && kontra.getStoreItem('musicSetting')) {
                //INTRO.play()
                stopListenMusic = true
            }
        })
        canvas.style.transform = 'translate(' + inter + 'px,' + inter2 + 'px)'
        let currentLook = { x: canvas.width / 2, y: canvas.height / 2 }
        var help = (function () {
            function DistSquared(pt1, pt2) {
                var diffX = pt1.x - pt2.x
                var diffY = pt1.y - pt2.y
                return (diffX * diffX + diffY * diffY);
            } 
            function closest(start, arr) {
                // yes officer its stock
                let close = arr[0]
                let shortestDistance = DistSquared(start, arr[0])
                for (i = 0; i < arr.length; i++) {
                    var d = DistSquared(start, arr[i])
                    if (d < shortestDistance) {
                        close = arr[i]
                        shortestDistance = d
                    }
                } return close
            }
            function abbrNum(number, decPlaces) {
                decPlaces = Math.pow(10,decPlaces);
                var abbrev = [ "k", "m", "b", "t" ];
                for (var i=abbrev.length-1; i>=0; i--) {
                    var size = Math.pow(10,(i+1)*3);
                    if(size <= number) {
                        number = Math.round(number*decPlaces/size)/decPlaces;
                        number += abbrev[i];
                        break
                    }
                }
                return number
            }
            let help = {
                closest,
                abbrNum,
            }
            return help
        })();
        let loadedAssets = 0
        let bossmusicToggle = false

        let stopLoopingBoss1 = false
        let stopLoopingBoss2 = false
        let stopLoopingBoss3 = false
        let stopLoopingBoss4 = false
        let stopLoopingBoss5 = false
        let assets = []

        // put your own music here
        // replace the file name with your wanted song
        let INTRO = new Audio('./sounds/music/INTRO.wav')
        let LOOP = new Audio('./sounds/music/LOOP.wav')
        let mainMenuTheme = new Audio('./sounds/music/menu-theme.wav')
        mainMenuTheme.loop = true
        
        let shopTheme = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/shop-loop.mp3?raw=true')
        
        let boss1INTRO = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss1INTRO.mp3?raw=true')
        let boss1LOOP = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss1LOOP.mp3?raw=true')

        let boss2INTRO = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss2INTRO.mp3?raw=true')
        let boss2LOOP = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss2LOOP.mp3?raw=true')

        let boss3INTRO = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss3INTRO.mp3?raw=true')
        let boss3LOOP = new Audio("https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss3LOOP.mp3?raw=true")
        
        // let boss4INTRO = new Audio('./sounds/music/boss4INTRO.mp3')
        // let boss4LOOP = new Audio('./sounds/music/boss4LOOP.mp3')

        let boss5INTRO = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss5INTRO.mp3?raw=true')
        let boss5LOOP = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/boss5LOOP.mp3?raw=true')

        let dieSound = new Audio('./sounds/sfx/die.wav')
        let UIClick = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true')
        let UIHover = new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true')
        let ambience = new Audio('./sounds/sfx/ambience2.m4a')

        let randSound1 = new Audio('./sounds/sfx/randSound1.ogg')
        let randSound2 = new Audio('./sounds/sfx/randSound2.ogg')
        let randSound3 = new Audio('./sounds/sfx/randSound3.ogg')
        
        let organHit = new Audio("./sounds/sfx/organ_hit.wav")
        let guitarHit = new Audio("./sounds/sfx/guitar_hit.wav")
        let sinwaveHit = new Audio("./sounds/sfx/sinwave_hit.wav")
        let honkyHit = new Audio("./sounds/sfx/honky_hit.wav")
        let newHit = new Audio("./sounds/sfx/new_hit.wav")

        let secret1 = new Audio('./sounds/music/secret1.m4a')
        secret1.loop = true

        boss1INTRO.onload = loadedAssets++
        boss2INTRO.onload = loadedAssets++
        boss3INTRO.onload = loadedAssets++
        //boss4INTRO.onload = loadedAssets++
        boss5INTRO.onload = loadedAssets++

        boss1LOOP.onload = loadedAssets++
        boss2LOOP.onload = loadedAssets++
        boss3LOOP.onload = loadedAssets++
        //boss4LOOP.onload = loadedAssets++
        boss5LOOP.onload = loadedAssets++

        INTRO.onload = loadedAssets++
        LOOP.onload = loadedAssets++
        LOOP.loop = true
        shopTheme.onload = loadedAssets++
        shopTheme.loop = true

        dieSound.onload = loadedAssets++
        UIClick.onload = loadedAssets++
        UIHover.onload = loadedAssets++
        ambience.onload = loadedAssets++
        ambience.loop = true

        randSound1.onload = loadedAssets++
        randSound2.onload = loadedAssets++
        randSound3.onload = loadedAssets++
        
        honkyHit.onload = loadedAssets++
        organHit.onload = loadedAssets++
        sinwaveHit.onload = loadedAssets++
        guitarHit.onload = loadedAssets++
        newHit.onload = loadedAssets++
        
        secret1.onload = loadedAssets++
        
        let stopListenMusic = false
        let stopListenLoopingMusic = false
        assets.push(
                    boss1INTRO, boss1LOOP, 
                    boss2INTRO, boss2LOOP, 
                    boss3INTRO, boss3LOOP,
                    //boss4INTRO, boss4LOOP,
                    boss5INTRO, boss5LOOP, 
                    secret1,INTRO, LOOP,shopTheme,
                    dieSound, UIClick, UIHover, ambience, 
                    randSound1, randSound2, randSound3,
                    organHit, guitarHit, sinwaveHit, honkyHit, newHit
                )
        let currentTrack = null
        kontra.keyMap['ShiftLeft'] = 'shift'
        let center = { x: 0.5, y: 0.5 }
        let spawning = false
        let playingMusic = false // music other than main menu music
        if (kontra.getStoreItem('randSoundPlayed') == null)kontra.setStoreItem('randSoundPlayed', 0)
        let amountSoundPlayed = kontra.getStoreItem('randSoundPlayed')
        let randSound = [randSound1,randSound2,randSound3]
        let randSoundLimited = [randSound2]
        function playRandSound() {
            let randomSound=randSound[kontra.randInt(0,randSound.length-1)];
            if (kontra.getStoreItem('soundsSetting'))randomSound.play();
            amountSoundPlayed+=1; kontra.setStoreItem('randSoundPlayed',amountSoundPlayed);
            setTimeout(playRandSound,kontra.randInt(30000,120000));
            console.log('RandomSoundPlayed:'+amountSoundPlayed);
        }
        function playRandLimitedSound() {
            let randomSound=randSound[kontra.randInt(0,randSoundLimited.length-1)];
            randomSound.play();
            amountSoundPlayed+=1; kontra.setStoreItem('randSoundPlayed',amountSoundPlayed);
            setTimeout(playRandLimitedSound,kontra.randInt(30000,120000));
            console.log('RandomLimitedSoundPlayed:'+amountSoundPlayed);
        }
        if (kontra.getStoreItem('soundsSetting') == null) kontra.setStoreItem('soundsSetting', true)
        if (kontra.getStoreItem('musicSetting') == null) kontra.setStoreItem('musicSetting', true)
        if (kontra.getStoreItem('enemyTrails') == null) kontra.setStoreItem('enemyTrails', false)
        if (kontra.getStoreItem('bulletTrails') == null) kontra.setStoreItem('bulletTrails', true)
        if (kontra.getStoreItem('allyTrails') == null) kontra.setStoreItem('allyTrails', true)
        if (kontra.getStoreItem('fireFX') == null) kontra.setStoreItem('fireFX',true)
        if (kontra.getStoreItem('backgroundParticles') == null)kontra.setStoreItem('backgroundParticles',false)
        if (kontra.getStoreItem('post') == null) kontra.setStoreItem('post', true)
        if (kontra.getStoreItem('bossParticles') == null) kontra.setStoreItem('bossParticles',true)
        if (kontra.getStoreItem('sinwaveToggled') == null) kontra.setStoreItem('sinwaveToggled',true)
        if (kontra.getStoreItem('unkINF') == null || !kontra.getStoreItem('unkINF')) kontra.setStoreItem('unkINF',false)
        if (kontra.getStoreItem('cleanedEvil') && 
            kontra.getStoreItem('no-hit') &&
            kontra.getStoreItem('secretLoadingScreen') &&
            kontra.getStoreItem('beatGameWithoutTurrets') &&
            kontra.getStoreItem('BeatGameAsHullBreaker') &&
            kontra.getStoreItem('BeatGameAsMini') &&
            kontra.getStoreItem('BeatGameAsEngi') &&
            kontra.getStoreItem('BeatGameAsFlamer') &&
            kontra.getStoreItem('BeatGameAsBulletHell') &&
            kontra.getStoreItem('beatenGames') >= 25 &&
            kontra.getStoreItem('bulletsShot') >= 100000 &&
            kontra.getStoreItem('builtConstructs') >= 250 &&
            kontra.getStoreItem('ignitedEnemies') >= 100000 &&
            kontra.getStoreItem('kills') >= 1000000 &&
            kontra.getStoreItem('bossKills') >= 100 &&
            kontra.getStoreItem('boss1Defeated') &&
            kontra.getStoreItem('boss2Defeated') &&
            kontra.getStoreItem('boss3Defeated') &&
            kontra.getStoreItem('boss4Defeated') &&
            kontra.getStoreItem('boss5Defeated')) kontra.setStoreItem('100', true)
        if (kontra.getStoreItem('100') == null || kontra.getStoreItem('100') == false) kontra.setStoreItem('100', false)
        if (kontra.getStoreItem('theSecret' == null)) kontra.setStoreItem('theSecret',false)
        if (kontra.getStoreItem('amountOwnedDamage') == null) kontra.setStoreItem('amountOwnedDamage',0)
        if (kontra.getStoreItem('amountOwnedDefense') == null) kontra.setStoreItem('amountOwnedDefense',0)
        if (kontra.getStoreItem('amountOwnedHealth') == null) kontra.setStoreItem('amountOwnedHealth',0)
        if (kontra.getStoreItem('amountOwnedAttackSpeed') == null) kontra.setStoreItem('amountOwnedAttackSpeed',0)
        if (kontra.getStoreItem('amountOwnedRange') == null) kontra.setStoreItem('amountOwnedRange',0)
        if (kontra.getStoreItem('amountOwnedMaxDrones') == null) kontra.setStoreItem('amountOwnedMaxDrones',0)
        if (kontra.getStoreItem('amountOwnedMaxTurrets') == null) kontra.setStoreItem('amountOwnedMaxTurrets',0)
        if (kontra.getStoreItem('amountOwnedMaxMines') == null) kontra.setStoreItem('amountOwnedMaxMines',0)
        if (kontra.getStoreItem('amountOwnedDroneDamage') == null) kontra.setStoreItem('amountOwnedDroneDamage',0)
        if (kontra.getStoreItem('amountOwnedMineDamage') == null) kontra.setStoreItem('amountOwnedMineDamage',0)
        if (kontra.getStoreItem('amountOwnedTurretDamage') == null) kontra.setStoreItem('amountOwnedTurretDamage',0)
        if (kontra.getStoreItem('amountOwnedCent') == null) kontra.setStoreItem('amountOwnedCent',0)
        
        let nohit = true
        let currentRunTurrets = 0
        let nohitStore = kontra.getStoreItem('no-hit')
        let controller = kontra.Sprite({
            update() {
                if (kontra.keyPressed('k')) {
                    currency++
                    kontra.setStoreItem('currency',currency)
                }
                if (kontra.keyPressed('l')) {
                    currency--
                    kontra.setStoreItem('currency',currency)
                }
            }
        })
        function createMenuFadingText(x, y, text = 'sample text', fontT = '32px Arial', textColor = 'white', sustain = 1.3) {
            let txt = kontra.Text({
                x: x, y: y, opacity: 0,
                anchor: center, ttl: sustain * 100,
                render() {
                    this.advance()
                    this.ttl -= 1
                    let refinedSustain = sustain * 100
                    if (this.ttl > refinedSustain - 35 && this.opacity <= 1) this.opacity += 0.1
                    if (this.ttl < 20) this.opacity -= 0.1
                    this.context.beginPath()
                    this.context.font = '0px Arial'
                    this.context.fillStyle = textColor
                    this.context.textAlign = 'center'
                    this.context.fillText(text, 0, 0)
                    if (this.opacity <= 0) settingsScene.remove(this)
                }
            })
            settingsScene.add(txt)
        }
        let arenaIn = 'story'
        let loadingScene = kontra.Scene({
            objects: [
                loadingBar = kontra.Sprite({
                    x: canvas.width / 2,
                    y: canvas.height / 2,
                    width: 0,
                    height: 20,
                    color_rand: kontra.randInt(0,30),
                    //anchor: center,
                    color: 'white',
                    update() {
                        if (this.color_rand == 0) {
                            this.color = randRGB()
                            if (!kontra.getStoreItem('secretLoadingScreen'))kontra.setStoreItem('secretLoadingScreen',true)
                            this.x += kontra.randInt(-50,50)
                            this.y += kontra.randInt(-50,50)
                            if (this.x > canvas.width || this.x < 0)this.x = canvas.width / 2
                            if (this.y < 0 || this.y > canvas.height) this.y = canvas.height / 2
                            this.width += kontra.randInt(-3, -7)
                        }
                        //this.width += kontra.randInt(3, 8)
                        this.width += kontra.randInt(.1, .5)
                        if (loadedAssets == assets.length)this.width += kontra.randInt(4, 8)
                        //this.width += kontra.randInt(0, 1)
                        //this.x = canvas.width / 2
                        if (this.width > canvas.width / 2) {
                            this.width = canvas.width / 2
                            this.opacity -= 0.05
                            if (this.opacity <= 0.01) {
                                loadingScene.destroy()
                                //wtf
                                //shopScene.add(controller)
                                loadingScene.remove(this)
                                currentScene = menuScene
                            }
                        }
                    }, render() {
                        this.context.strokeStyle = this.color
                        this.context.beginPath()
                        this.context.lineWidth = 8
                        this.context.shadowBlur = 40
                        this.context.shadowColor = this.color
                        this.context.rect(-canvas.width / 4, 0, canvas.width / 2, 20)
                        //this.context.rect(-canvas.width / 4,0,canvas.width / 2,15)
                        this.context.stroke()
                        this.context.closePath()

                        this.context.fillStyle = this.color
                        this.context.beginPath()
                        this.context.lineWidth = 8
                        this.context.shadowBlur = 40
                        this.context.rect(-canvas.width / 4, 0, this.width, 20)
                        this.context.font = 'bold 32px Arial'
                        this.context.textAlign = 'center'
                        this.context.fillText('loading assets (' + loadedAssets + '/' + assets.length + ')', 0, -16)
                        this.context.fill()
                        this.context.closePath()
                    }
                })
            ]
        })
        //console.log(loadingScene.objects[0].color_rand)
        function restartMenuScene() {
            menuScene = kontra.Scene({
                objects: [
                    menuText = kontra.Text({
                        x: canvas.width / 2, y: canvas.height / 5,
                        anchor: center, text: 'DELTALIGHT', color: 'white', font: '48px Arial'
                    }),
                    menuVersion = kontra.Text({
                        x: canvas.width / 2, y: canvas.height / 4,
                        anchor: center, text: version, color: 'white', font: '16px Arial'
                    }),
                    menuYoutubeButton = kontra.Button({
                                anchor: center, dt: 0,
                                x: canvas.width - 50,y: canvas.height - 50,
                                text: {
                                    text: '>',
                                    color: 'red', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 50, height: 50, render() {
                                    this.context.fillStyle = 'darkred'
                                    if (!this.hovered) this.context.strokeStyle = 'red'
                                    if (this.hovered) this.context.strokeStyle = 'red'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed && amountTimesClicked == 0) {
                                        amountTimesClicked = 1
                                        window.open('https://www.youtube.com/@z0475')
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered)hovering = true
                                }
                            }),
                    menuDiv = kontra.Grid({
                        x: canvas.width / 2,
                        y: canvas.width / 2.5,
                        anchor: center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            startButton = kontra.Button({
                                anchor: center, dt: 0,
                                text: {
                                    text: 'start',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 300, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartGameModeScene()
                                        currentScene = gameModeScene
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered) if (this.width < 350) this.width += 10
                                    if (this.hovered)hovering = true
                                    if (!this.hovered) if (this.width > 300) this.width -= 8
                                }
                            }),
                            settingsButton = kontra.Button({
                                anchor: center,
                                text: {
                                    text: 'settings',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 300, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartSettingsScene()
                                        currentScene = settingsScene
                                        if (kontra.getStoreItem('soundsSetting')&& !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting')&& !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered)hovering = true
                                    if (this.hovered) if (this.width < 350) this.width += 10
                                    if (!this.hovered) if (this.width > 300) this.width -= 8
                                }
                            }),
                            achButton = kontra.Button({
                                x: canvas.width / 2, y: canvas.height - canvas.height / 3, anchor: center,
                                text: {
                                    text: 'achievements',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 300, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartAchScene()
                                        currentScene = achScene
                                        if (kontra.getStoreItem('soundsSetting')&& !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting')&& !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered)hovering = true
                                    if (this.hovered) if (this.width < 350) this.width += 10
                                    if (!this.hovered) if (this.width > 300) this.width -= 8
                                }
                            }),
                            shopButton = kontra.Button({
                                anchor: center, dt: 0,
                                text: {
                                    text: 'shop',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 300, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartShop()
                                        shopScene.add(controller)
                                        currentScene = shopScene
                                        if (kontra.getStoreItem("musicSetting"))shopTheme.play()
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting') && !ambience.paused)new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered) if (this.width < 350) this.width += 10
                                    if (this.hovered)hovering = true
                                    if (!this.hovered) if (this.width > 300) this.width -= 8
                                }
                            }),
                        ]
                    }),
                    
                ]
            })
        }
        let menuScene = null
        restartMenuScene()
        function restartAchScene() {
            achScene = kontra.Scene({
                objects: [
                    achTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'ACHIEVEMENTS',anchor:center
                    }),
                    achGridOne = kontra.Grid({
                        x: 150,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Exterminator',desc: 'kill 1000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('kills') > 1000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'Mass Murderer',desc: 'kill 10000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('kills') > 10000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Extinction',desc: 'kill 100000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('kills') > 100000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach4 = kontra.Sprite({
                                name: "Death's Servant",desc: 'kill 1000000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('kills') > 1000000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridTwo = kontra.Grid({
                        x: 470,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Too Easy',desc: 'kill the first boss.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('boss1Defeated'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'Tired Already?',desc: 'kill the second boss.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('boss2Defeated'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'oh god the lag',desc: 'kill the third boss.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('boss3Defeated'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach4 = kontra.Sprite({
                                name: 'Was THAT Hard?',desc: 'kill the fourth boss.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('boss4Defeated'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridThree = kontra.Grid({
                        x: 780,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Destroyer',desc: 'kill 5 bosses.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bossKills') > 4,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'Shredder',desc: 'kill 10 bosses.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bossKills') >= 10,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Killer',desc: 'kill 25 bosses.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bossKills') >= 25,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Grinder',desc: 'kill 50 bosses.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bossKills') >= 50,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achPageTwoButton = kontra.Button({
                        x: canvas.width / 2 + 165,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.fillText('>',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageTwoAch()
                                currentScene = pageTwoAch
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                    backButton = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - 55, anchor: center, dt: 0,
                        text: {
                            text: 'back',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 200, height: 60, render() {
                            if (this.pressed) this.dt += 1 / 100
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                restartMenuScene()
                                currentScene = menuScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 250) this.width += 10
                            if (!this.hovered) if (this.width > 200) this.width -= 8
                        }
                    })
                ]
            })
        }
        function restartPageTwoAch() {
            pageTwoAch = kontra.Scene({
                objects: [
                    achTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'ACHIEVEMENTS',anchor:center
                    }),
                    achGridOne = kontra.Grid({
                        x: 150,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Beginner Flamer',desc: 'ignite 1000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('ignitedEnemies') > 1000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach1 = kontra.Sprite({
                                name: 'Junior Flamer',desc: 'ignite 10000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('ignitedEnemies') > 10000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Flamer Master',desc: 'ignite 100000 enemies.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('ignitedEnemies') > 100000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach4 = kontra.Sprite({
                                name: 'Flamer Senior',desc: 'Beat the game as flamer.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('BeatGameAsFlamer'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridTwo = kontra.Grid({
                        x: 470,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                        ach1 = kontra.Sprite({
                                name: 'Beginner Engineer',desc: 'build 50 constructs.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('builtConstructs') > 50,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    //this.context.fillText('unlocks the engineer.',10,80)
                                    this.context.closePath()
                                }
                            }),
                            ach1 = kontra.Sprite({
                                name: 'Junior Engineer',desc: 'build 100 constructs.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('builtConstructs') > 100,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Engineer Master',desc: 'build 250 constructs.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('builtConstructs') > 250,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach4 = kontra.Sprite({
                                name: 'Engineer Senior',desc: 'Beat the game as engineer.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('BeatGameAsEngi'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridThree = kontra.Grid({
                        x: 790,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Starter Bullet-hell',desc: 'shoot 1000 bullets.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bulletsShot') > 1000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'Junior Bullet-hell',desc: 'shoot 10000 bullets.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bulletsShot') > 10000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Master Bullet-hell',desc: 'shoot 100000 bullets.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('bulletsShot') > 100000,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Bullet-hell Senior',desc: 'beat the game as bullet-hell.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('BeatGameAsBulletHell'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achPageOneButton = kontra.Button({
                        x: canvas.width / 2 - 165,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.fillText('<',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartAchScene()
                                currentScene = achScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                    achPageThreeButton = kontra.Button({
                        x: canvas.width / 2 + 165,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.fillText('>',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageThreeAch()
                                currentScene = pageThreeAch
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    })
                ]
            })
        }
        function restartPageThreeAch() {
            pageThreeAch = kontra.Scene({
                objects: [
                    achTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'ACHIEVEMENTS',anchor:center
                    }),
                    achGridOne = kontra.Grid({
                        x: 150,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'Is That It?',desc: 'beat the game as minigunner.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('BeatGameAsMini'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'This Class Sucks..',desc: 'beat the game as the hullbreaker.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('BeatGameAsHullBreaker'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridTwo = kontra.Grid({
                        x: 470,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                        ach1 = kontra.Sprite({
                                name: 'Beginner Devotee',desc: 'beat the game.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('beatenGames') > 0,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach1 = kontra.Sprite({
                                name: 'Junior Devotee',desc: 'beat the game 5 times.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('beatenGames') > 4,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Master Devotee',desc: 'beat the game 15 times.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('beatenGames') > 14,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach4 = kontra.Sprite({
                                name: 'Senior Devotee',desc: 'beat the game 25 times.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('beatenGames') > 24,
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achGridThree = kontra.Grid({
                        x: 790,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'No Words.',desc: 'beat the game without turrets.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('beatGameWithoutTurrets'),
                                render() {
                                    this.context.strokeStyle = 'orange'
                                    //if (this.done) this.context.strokeStyle = 'lightgreen'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    this.context.shadowColor = 'orange'
                                    //if (this.done) this.context.shadowColor = 'lightgreen'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = 'lightgreen'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'You Okay?',desc: 'beat the game no-hit.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('no-hit'),
                                render() {
                                    this.context.strokeStyle = 'orange'
                                    //if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    this.context.shadowColor = 'orange'
                                    //if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Is That You, God?',desc: 'beat the game no-hit and no bullets fired.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('no-hit') && bulletsShot == 0,
                                render() {
                                    this.context.strokeStyle = 'orange'
                                    //if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    this.context.shadowColor = 'orange'
                                    //if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Powerwasher',desc: 'clense the evil.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('cleanedEvil'),
                                render() {
                                    this.context.strokeStyle = 'orange'
                                    //if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    this.context.shadowColor = 'orange'
                                    //if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    achPageTwoButton = kontra.Button({
                        x: canvas.width / 2 - 165,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.fillText('<',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageTwoAch()
                                currentScene = pageTwoAch
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                    achPageFourButton = kontra.Button({
                        x: canvas.width / 2 + 165,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'red'
                            if (this.hovered)this.context.strokeStyle = 'red'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'red'
                            this.context.fillText('>',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageFourAch()
                                currentScene = pageFourAch
                                kontra.setStoreItem('theSecret',true)
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    })
                ]
            })
        }
        function restartPageFourAch() {
            pageFourAch = kontra.Scene({
                objects: [
                    achTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'SECRET',anchor:center
                    }),
                    achTitle2 = kontra.Text({
                        x: canvas.width/2,y:100, color:'white',font: '48px Arial',text:'ACHIEVEMENTS',anchor:center
                    }),
                    // achGridOne = kontra.Grid({
                    //     x: 150,y: canvas.width/2.5,
                    //     anchor:center,
                    //     rowGap: 25,
                    //     justify: 'center',
                    //     children: [
                    //         ach1 = kontra.Sprite({
                    //             name: 'Is That It?',desc: 'beat the game as minigunner.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('BeatGameAsMini'),
                    //             render() {
                    //                 if (!this.done)this.context.strokeStyle = 'white'
                    //                 if (this.done) this.context.strokeStyle = '#afa'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 if (!this.done)this.context.shadowColor = 'white'
                    //                 if (this.done) this.context.shadowColor = '#afa'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = '#afa'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //         ach3 = kontra.Sprite({
                    //             name: 'This Class Sucks..',desc: 'beat the game as the hullbreaker.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('BeatGameAsHullBreaker'),
                    //             render() {
                    //                 if (!this.done)this.context.strokeStyle = 'white'
                    //                 if (this.done) this.context.strokeStyle = '#afa'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 if (!this.done)this.context.shadowColor = 'white'
                    //                 if (this.done) this.context.shadowColor = '#afa'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = '#afa'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //     ]
                    // }),
                    achGridTwo = kontra.Grid({
                        x: 470,y: canvas.width/2.5,
                        anchor:center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            ach1 = kontra.Sprite({
                                name: 'heh',desc: 'find the secret.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('theSecret'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach1 = kontra.Sprite({
                                name: 'One More?',desc: 'find the second secret.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('theSecondSecret'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach2 = kontra.Sprite({
                                name: 'The Key',desc: 'experience the alternative loading screen.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('secretLoadingScreen'),
                                render() {
                                    if (!this.done)this.context.strokeStyle = 'white'
                                    if (this.done) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = 'white'
                                    if (this.done) this.context.shadowColor = '#afa'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '15px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                            ach3 = kontra.Sprite({
                                name: 'Perfectionist',desc: '100% the game.',
                                anchor:center,width:300,height: 100,color:'white',
                                done: kontra.getStoreItem('100') ,
                                render() {
                                    if (!this.done)this.context.strokeStyle = '#bfaaff'
                                    if (this.done) this.context.strokeStyle = '#bfaaff'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.done)this.context.shadowColor = '#bfaaff'
                                    if (this.done) this.context.shadowColor = '#bfaaff'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.done) this.context.fillStyle = 'white'
                                    if (this.done) this.context.fillStyle = '#afa'
                                    this.context.fillText(this.name,10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '15px Arial'
                                    this.context.fillText(this.desc,10,60)
                                    this.context.closePath()
                                }
                            }),
                        ]
                    }),
                    // achGridThree = kontra.Grid({
                    //     x: 790,y: canvas.width/2.5,
                    //     anchor:center,
                    //     rowGap: 25,
                    //     justify: 'center',
                    //     children: [
                    //         ach1 = kontra.Sprite({
                    //             name: 'no words.',desc: 'beat the game without turrets.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('beatGameWithoutTurrets'),
                    //             render() {
                    //                 this.context.strokeStyle = 'orange'
                    //                 //if (this.done) this.context.strokeStyle = 'lightgreen'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 this.context.shadowColor = 'orange'
                    //                 //if (this.done) this.context.shadowColor = 'lightgreen'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = 'lightgreen'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //         ach2 = kontra.Sprite({
                    //             name: 'you okay?',desc: 'beat the game no-hit.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('no-hit'),
                    //             render() {
                    //                 this.context.strokeStyle = 'orange'
                    //                 //if (this.done) this.context.strokeStyle = '#afa'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 this.context.shadowColor = 'orange'
                    //                 //if (this.done) this.context.shadowColor = '#afa'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = '#afa'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //         ach3 = kontra.Sprite({
                    //             name: 'is that you, god?',desc: 'beat the game no-hit and no bullets fired.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('no-hit'),
                    //             render() {
                    //                 this.context.strokeStyle = 'orange'
                    //                 //if (this.done) this.context.strokeStyle = '#afa'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 this.context.shadowColor = 'orange'
                    //                 //if (this.done) this.context.shadowColor = '#afa'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = '#afa'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //         ach3 = kontra.Sprite({
                    //             name: 'powerwasher',desc: 'clense the evil.',
                    //             anchor:center,width:300,height: 100,color:'white',
                    //             done: kontra.getStoreItem('cleanedEvil'),
                    //             render() {
                    //                 this.context.strokeStyle = 'orange'
                    //                 //if (this.done) this.context.strokeStyle = '#afa'
                    //                 this.context.lineWidth = 8
                    //                 this.context.shadowBlur = 20
                    //                 this.context.shadowColor = 'orange'
                    //                 //if (this.done) this.context.shadowColor = '#afa'
                    //                 this.context.beginPath()
                    //                 this.context.rect(0,0,this.width,this.height)
                    //                 this.context.stroke()
                    //                 this.context.closePath()
                    //                 this.context.beginPath()
                    //                 if (!this.done) this.context.fillStyle = 'white'
                    //                 if (this.done) this.context.fillStyle = '#afa'
                    //                 this.context.fillText(this.name,10,35)
                    //                 this.context.lineWidth = 4
                    //                 this.context.font = '16px Arial'
                    //                 this.context.fillText(this.desc,10,60)
                    //                 this.context.closePath()
                    //             }
                    //         }),
                    //     ]
                    // }),
                    achPageThreeButton = kontra.Button({
                        x: 55,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.fillText('<',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageThreeAch()
                                currentScene = pageThreeAch
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                    // achPageFiveButton = kontra.Button({
                    //     x: canvas.width - 55,y: canvas.height - 55,width: 50,height: 50,anchor:center,
                    //     render() {
                    //         if (!this.hovered)this.context.strokeStyle = 'red'
                    //         if (this.hovered)this.context.strokeStyle = 'darkred'
                    //         this.context.beginPath()
                    //         this.context.lineWidth = 8
                    //         this.context.rect(0,0,this.width,this.height)
                    //         this.context.stroke()
                    //         this.context.closePath()
                    //         this.context.beginPath()
                    //         this.context.fillStyle = 'red'
                    //         this.context.fillText('>',15,35)
                    //         this.context.fill()
                    //         if (this.hovered && this.playSound) {
                    //             this.playSound = false
                    //             if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIHover.wav').play()
                    //         }
                    //         if (!this.hovered) this.playSound = true
                    //         if (this.pressed) {
                    //             //restartPageFourAch()
                    //             //currentScene = pageFourAch
                    //             if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIClick.wav').play()
                    //         }
                    //     }
                    // })
                ]
            })
        }
        let achScene = null
        //restartAchScene()
        let pageTwoAch = null
        let pageThreeAch = null
        let pageFourAch = null
        function restartShop() {
            shopScene = kontra.Scene({
                objects: [
                    shopTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'SHOP',anchor:center
                    }),
                    currencyDisplay = kontra.Text({
                        x: canvas.width/2,y:80, color:'white',font: '24px Arial',text:currency + 'c',anchor:center,update() {
                            this.text = help.abbrNum(Math.round(currency),2) + 'c'
                        }
                    }),
                    shopBox = kontra.Sprite({
                        x: canvas.width/2-55,y:canvas.height / 2, color:'white',width: canvas.width,height: 15,anchor:center
                    }),
                    damage = kontra.Button({
                        x: 150, y: canvas.height / 3.5,
                        effect: 'damage',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedDamage'),
                        maxAmount: 10,
                        price: 100,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('kills') > 10000 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('damage',7,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Mass Murderer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                this.clickDT = 0
                                                kontra.setStoreItem('amountOwnedDamage', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                           }),
                    defense = kontra.Button({
                        x: canvas.width / 2, y: canvas.height / 3.5,
                        effect: 'defense',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 250,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedDefense'),
                        maxAmount: 10,
                        price: 250,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('bulletsShot') > 10000 && kontra.currency >= 100)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('defense',10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Mass Murderer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.pressed) {
                                        if (this.amountOwned > this.maxAmount) {
                                            this.amountOwned = this.maxAmount
                                            kontra.setStoreItem('amountOwnedDefense', this.amountOwned)
                                        }
                                    }
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.amountOwned += 1
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                kontra.setStoreItem('amountOwnedDefense', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    health = kontra.Button({
                        x: canvas.width/2+300, y: canvas.height / 3.5,
                        effect: 'health',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedHealth'),
                        maxAmount: 10,
                        price: 100,
                        clickDT:0,
                        render(){ 
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('kills') > 1000 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('health',20,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Exterminator" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedHealth', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    maxDrones = kontra.Button({
                        x: 150, y: canvas.width / 2,
                        effect: 'maxDrones',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedMaxDrones'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('drones',13,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                maxDrones++
                                                kontra.setStoreItem('amountOwnedMaxDrones', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    maxTurrets = kontra.Button({
                        x: canvas.width/2, y: canvas.width / 2,
                        effect: 'maxTurrets',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedMaxTurrets'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('turrets',20,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                maxTurrets++
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedMaxTurrets', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    maxMines = kontra.Button({
                        x: canvas.width/2+300, y: canvas.width / 2,
                        effect: 'maxMines',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedMaxMines'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('mines',20,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                maxTurrets++
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedMaxMines', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    pageTwoButton = kontra.Button({
                        x: canvas.width - 30,y: canvas.height / 2,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.font = '32px Arial'
                            this.context.fillText('>',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartPageTwoShop()
                                currentScene = pageTwoShop
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                    backButton = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - 55, anchor: center, dt: 0,
                        text: {
                            text: 'back',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 200, height: 60, render() {
                            if (this.pressed) this.dt += 1 / 100
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                restartMenuScene()
                                currentScene = menuScene
                                shopTheme.pause()
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 250) this.width += 10
                            if (!this.hovered) if (this.width > 200) this.width -= 8
                        }
                    })
                ]
            })
        }
        let shopScene = null
        function restartPageTwoShop() {
            pageTwoShop = kontra.Scene({
                objects: [
                    shopTitle = kontra.Text({
                        x: canvas.width/2,y:50, color:'white',font: '48px Arial',text:'SHOP',anchor:center
                    }),
                    currencyDisplay = kontra.Text({
                        x: canvas.width/2,y:80, color:'white',font: '24px Arial',text:currency + 'c',anchor:center,update() {
                            this.text = Math.round(currency) + 'c'
                        }
                    }),
                    shopBox = kontra.Sprite({
                        x: canvas.width/2+55,y:canvas.height / 2, color:'white',width: canvas.width,height: 15,anchor:center
                    }),
                    cent = kontra.Button({
                        x: 150, y: canvas.height / 3.5,
                        effect: 'cent',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 250,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedCent'),
                        maxAmount: 10,
                        price: 250,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('beatenGames') > 0 && kontra.currency >= 250)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('centGain',13,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Beginner Devotee" achievement',50,130)
                                    this.context.closePath()
                                    if (this.pressed) {
                                        if (this.amountOwned > this.maxAmount) {
                                            this.amountOwned = this.maxAmount
                                            kontra.setStoreItem('amountOwnedAttackSpeed', this.amountOwned)
                                        }
                                    }
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.amountOwned += 1
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                kontra.setStoreItem('amountOwnedCent', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    attackSpeed = kontra.Button({
                        x: canvas.width / 2, y: canvas.height / 3.5,
                        effect: 'attackSpeed',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 250,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedAttackSpeed'),
                        maxAmount: 10,
                        price: 250,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('bulletsShot') > 10000 && kontra.currency >= 250)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('atkSpd',13,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Bullet Hell" achievement',50,130)
                                    this.context.closePath()
                                    if (this.pressed) {
                                        if (this.amountOwned > this.maxAmount) {
                                            this.amountOwned = this.maxAmount
                                            kontra.setStoreItem('amountOwnedAttackSpeed', this.amountOwned)
                                        }
                                    }
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.amountOwned += 1
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                kontra.setStoreItem('amountOwnedAttackSpeed', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    range = kontra.Button({
                        x: canvas.width/2+300, y: canvas.height / 3.5,
                        effect: 'range',needs: null,
                        price: 100,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedRange'),
                        maxAmount: 10,
                        price: 100,
                        clickDT:0,
                        render(){ 
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('kills') > 1000 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('range',20,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '%/' + this.maxAmount + '%',50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Exterminator" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedRange', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    droneDamage = kontra.Button({
                        x: 150, y: canvas.width / 2,
                        effect: 'droneDamage',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedDroneDamage'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('drne dmg',13,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                maxDrones++
                                                kontra.setStoreItem('amountOwnedDroneDamage', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    turretDamage = kontra.Button({
                        x: canvas.width/2, y: canvas.width / 2,
                        effect: 'TurretDamage',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedTurretDamage'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('tur dmg',13,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                maxTurrets++
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedTurretDamage', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    mineDamage = kontra.Button({
                        x: canvas.width/2+300, y: canvas.width / 2,
                        effect: 'mineDamage',needs: null,
                        price: 500,
                        anchor:center,width:100,height: 100,color:'white',
                        canAfford: kontra.getStoreItem('currency') >= 100,
                        unlocked: false,
                        amountOwned: kontra.getStoreItem('amountOwnedMineDamage'),
                        maxAmount: 3,
                        clickDT: 0,
                        render() {
                                    this.clickDT += 1/100
                                    if (kontra.getStoreItem('builtConstructs') >= 100 && kontra.getStoreItem('currency') >= this.price)this.unlocked = true
                                    if (kontra.getStoreItem('currency') < this.price) this.unlocked = false
                                    if (!this.unlocked)this.context.strokeStyle = 'red'
                                    if (this.unlocked) this.context.strokeStyle = 'white'
                                    this.context.lineWidth = 8
                                    this.context.shadowBlur = 20
                                    if (!this.unlocked)this.context.shadowColor = 'red'
                                    if (this.unlocked) this.context.shadowColor = 'white'
                                    this.context.beginPath()
                                    this.context.rect(0,0,this.width,this.height)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    if (!this.unlocked) this.context.fillStyle = 'red'
                                    if (this.unlocked) this.context.fillStyle = 'white'
                                    this.context.font = '24px Arial'
                                    this.context.fillText('mine dmg',10,35)
                                    this.context.lineWidth = 4
                                    this.context.font = '16px Arial'
                                    this.context.textAlign = 'center'
                                    this.context.fillText(this.amountOwned + '/' + this.maxAmount,50,60)
                                    this.context.fillText(this.price + 'c',50,90)
                                    this.context.fillText('requires "Junior Engineer" achievement',50,130)
                                    this.context.closePath()
                                    if (this.hovered) {
                                        hovering = true
                                        if (this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = '#afa'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                            if (this.pressed && this.amountOwned < this.maxAmount && this.clickDT > 0.25) {
                                                this.clickDT = 0
                                                currency -= this.price
                                                maxTurrets++
                                                kontra.setStoreItem('currency',currency)
                                                this.amountOwned += 1
                                                kontra.setStoreItem('amountOwnedMineDamage', this.amountOwned)
                                            }
                                        }
                                        if (!this.unlocked) {
                                            this.context.beginPath()
                                            this.context.strokeStyle = 'red'
                                            this.context.rect(-5,-5,this.width + 10,this.height + 10)
                                            this.context.stroke()
                                            this.context.closePath()
                                        }
                                    }
                                }
                    }),
                    pageOneButton = kontra.Button({
                        x: 30,y: canvas.height / 2,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.fillStyle = 'white'
                            this.context.font = '32px Arial'
                            this.context.fillText('<',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartShop()
                                currentScene = shopScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                ]
            })
        }
        let pageTwoShop = null
        function restartSettingsScene() {
            settingsScene = kontra.Scene({
                objects: [
                    settingsTitle = kontra.Text({
                        x: canvas.width/2, y: 100, color: 'white', font: '48px Arial', anchor: center, text: 'SETTINGS'
                    }),
                    settingsDiv = kontra.Grid({
                        x: 100, y: canvas.width / 2.5,
                        anchor: center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            enemyTrailButton = kontra.Button({
                                toggled: kontra.getStoreItem('enemyTrails'),
                                //x: 100,y: canvas.height/3,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Enemy Trails', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('enemyTrails', this.toggled)
                                    }
                                }
                            }),
                            bullletTrailButton = kontra.Button({
                                toggled: kontra.getStoreItem('bulletTrails'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Bullet Trails', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('bulletTrails', this.toggled)
                                    }
                                }
                            }),
                            backgroundParticleToggle = kontra.Button({
                                toggled: kontra.getStoreItem('backgroundParticles'),
                                //x: 100,y: canvas.height/3,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Background Particles', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('backgroundParticles'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Reload the page.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('backgroundParticles', this.toggled)
                                        setTimeout(() => {
                                            window.location.reload()
                                        },25)
                                    }
                                }
                            }),
                            musicButton = kontra.Button({
                                toggled: kontra.getStoreItem('musicSetting'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Music', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('musicSetting', this.toggled)
                                    }
                                }
                            }),
                            soundsButton = kontra.Button({
                                toggled: kontra.getStoreItem('soundsSetting'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Sounds', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('soundsSetting', this.toggled)
                                    }
                                }
                            }),
                            allyTrailsButton = kontra.Button({
                                toggled: kontra.getStoreItem('allyTrails'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Ally Trails', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('allyTrails', this.toggled)
                                    }
                                }
                            }),
                        ]
                    }),
                    settings2Div = kontra.Grid({
                        x: canvas.width / 2,y: canvas.width / 2.5,
                        anchor:center, 
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            fireFXButton = kontra.Button({
                                toggled: kontra.getStoreItem('fireFX'),
                                //x: 100,y: canvas.height/3,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Fire/Poison Effects', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('fireFX', this.toggled)
                                    }
                                }
                            }),
                            bossFXButton = kontra.Button({
                                toggled: kontra.getStoreItem('bossParticles'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Boss Particles', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('bossParticles', this.toggled)
                                    }
                                }
                            }),
                            postProcessButton = kontra.Button({
                                toggled: kontra.getStoreItem('post'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                                        if (kontra.getStoreItem('post'))this.context.shadowBlur = 50
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 8
                                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 50
                                    this.context.rect(0, 0, 20, 20)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Post Processing', 40, 20)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.strokeStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.strokeStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.rect(0, 0, 20, 20)
                                        this.context.stroke()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('post', this.toggled)
                                    }
                                }
                            }),
                        ]
                    }),
                    backButton = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - 100, anchor: center, dt: 0,
                        text: {
                            text: 'back',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 200, height: 60, render() {
                            if (this.pressed) this.dt += 1 / 100
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                restartMenuScene()
                                currentScene = menuScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 250) this.width += 10
                            if (!this.hovered) if (this.width > 200) this.width -= 8
                        }
                    }),
                    settingsPage2Button = kontra.Button({
                        x: canvas.width / 2 + 165,y: canvas.height - 100,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.font = '32px Arial'
                            this.context.fillStyle = 'white'
                            this.context.fillText('>',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartSettingsPage2Scene()
                                currentScene = settingsPage2Scene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                ]
            })
        }
        function restartSettingsPage2Scene() {
            settingsPage2Scene = kontra.Scene({
                objects: [
                    clenseEvil = kontra.Button({
                        toggled: kontra.getStoreItem('cleanedEvil'),
                        x: 30,y: 105,
                        anchor: center, dt: 0, width: 20, height: 20,
                        render() {
                            this.context.font = '32px Arial'
                            if (this.toggled) {
                                this.context.beginPath()
                                this.context.fillStyle = 'cyan'
                                this.context.arc(5, 5, 10, 0, Math.PI*2)
                                this.context.fill()
                                this.context.closePath()
                            }
                            this.context.strokeStyle = 'cyan'
                            this.context.beginPath()
                            this.context.lineWidth = 4
                            this.context.globalAlpha = 0.3
                            this.context.arc(5, 5, 17, 0, Math.PI*2)
                            this.context.stroke()
                            this.context.closePath()
                            if (this.hovered) {
                                this.context.fillStyle = 'cyan'
                                this.context.beginPath()
                                this.context.lineWidth = 8
                                this.context.arc(5, 5, 10, 0, Math.PI*2)
                                this.context.fill()
                            }
                            if (this.hovered)hovering = true                            
                            
                        },
                        update() {
                            this.dt += 1 / 25
                            if (this.dt > 0.25 && this.pressed) {
                                this.dt = 0
                                if (!this.toggled && this.hovered) this.toggled = true
                                kontra.setStoreItem('cleanedEvil',true)
                            }
                        }
                    }),
                    instrumentsTitle = kontra.Text({
                        x: canvas.width/2, y: 100, color: 'white', font: '48px Arial', anchor: center, text: 'SHOT INSTRUMENTS'
                    }),
                    intrumentsDiv = kontra.Grid({
                        x: canvas.width/3, y: canvas.width / 2.5,
                        anchor: center,
                        rowGap: 25,
                        justify: 'center',
                        children: [
                            sinwave = kontra.Button({
                                toggled: kontra.getStoreItem('sinwaveToggled'),
                                //x: 100,y: canvas.height/3,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                                        if (kontra.getStoreItem('post'))this.context.shadowBlur = 25
                                        this.context.fillStyle = 'white'
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 25
                                    this.context.beginPath()
                                    this.context.lineWidth = 4
                                    this.context.arc(5, 5, 17, 0, Math.PI*2)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Sinewave', 35, 15)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.fillStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0,Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.fillStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))sinwaveHit.play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('sinwaveToggled', this.toggled)
                                        kontra.setStoreItem('guitarToggled', false)
                                        kontra.setStoreItem('organToggled', false)
                                        kontra.setStoreItem('pianoToggled', false)
                                        kontra.setStoreItem('newAgePadToggled', false)
                                        intrumentsDiv.children[1].toggled = false
                                        intrumentsDiv.children[2].toggled = false
                                        intrumentsDiv.children[3].toggled = false
                                        intrumentsDiv.children[4].toggled = false
                                        intrumentsDiv.children[5].toggled = false
                                    }
                                }
                            }),
                            organ = kontra.Button({
                                toggled: kontra.getStoreItem('organToggled'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 4
                                    this.context.arc(5, 5, 17, 0, Math.PI*2)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Organ', 35, 10)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.fillStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0,Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.fillStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))organHit.play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('organToggled', this.toggled)
                                        kontra.setStoreItem('guitarToggled', false)
                                        kontra.setStoreItem('sinwaveToggled', false)
                                        kontra.setStoreItem('pianoToggled', false)
                                        kontra.setStoreItem('newAgePadToggled', false)
                                        intrumentsDiv.children[0].toggled = false
                                        intrumentsDiv.children[2].toggled = false
                                        intrumentsDiv.children[3].toggled = false
                                        intrumentsDiv.children[4].toggled = false
                                        intrumentsDiv.children[5].toggled = false
                                    }
                                }
                            }),
                            guitar = kontra.Button({
                                toggled: kontra.getStoreItem('guitarToggled'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 4
                                    this.context.arc(5, 5, 17, 0, Math.PI*2)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Guitar', 35, 10)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.fillStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0,Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.fillStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))guitarHit.play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('guitarToggled', this.toggled)
                                        kontra.setStoreItem('organToggled', false)
                                        kontra.setStoreItem('sinwaveToggled', false)
                                        kontra.setStoreItem('pianoToggled', false)
                                        kontra.setStoreItem('newAgePadToggled', false)
                                        intrumentsDiv.children[0].toggled = false
                                        intrumentsDiv.children[1].toggled = false
                                        intrumentsDiv.children[3].toggled = false
                                        intrumentsDiv.children[4].toggled = false
                                        intrumentsDiv.children[5].toggled = false
                                    }
                                }
                            }),
                            piano = kontra.Button({
                                toggled: kontra.getStoreItem('pianoToggled'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    //if (!this.toggled) {
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 4
                                    this.context.arc(5, 5, 17, 0, Math.PI*2)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('Honky-tonk piano', 35, 10)
                                    this.context.fill()
                                    //}
                                    if (this.hovered && !this.toggled) {
                                        this.context.fillStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0,Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.fillStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))honkyHit.play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('pianoToggled', this.toggled)
                                        kontra.setStoreItem('guitarToggled', false)
                                        kontra.setStoreItem('organToggled', false)
                                        kontra.setStoreItem('sinwaveToggled', false)
                                        kontra.setStoreItem('newAgePadToggled', false)
                                        intrumentsDiv.children[0].toggled = false
                                        intrumentsDiv.children[1].toggled = false
                                        intrumentsDiv.children[2].toggled = false
                                        intrumentsDiv.children[4].toggled = false
                                        intrumentsDiv.children[5].toggled = false
                                    }
                                }
                            }),
                            newAgePad = kontra.Button({
                                toggled: kontra.getStoreItem('newAgePadToggled'),
                                //x: 100,y: canvas.height/2.5,
                                anchor: center, dt: 0, width: 20, height: 20,
                                render() {
                                    this.context.font = '32px Arial'
                                    if (this.toggled) {
                                        this.context.beginPath()
                                        this.context.fillStyle = 'white'
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                        this.context.closePath()
                                    }
                                    this.context.strokeStyle = 'white'
                                    this.context.beginPath()
                                    this.context.lineWidth = 4
                                    this.context.arc(5, 5, 17, 0, Math.PI*2)
                                    this.context.stroke()
                                    this.context.closePath()
                                    this.context.beginPath()
                                    this.context.fillStyle = 'white'
                                    this.context.fillText('New Age Pad', 35, 10)
                                    this.context.fill()
                                    if (this.hovered && !this.toggled) {
                                        this.context.fillStyle = 'blue'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0,Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered && this.toggled) {
                                        this.context.fillStyle = 'red'
                                        this.context.beginPath()
                                        this.context.lineWidth = 8
                                        this.context.arc(5, 5, 10, 0, Math.PI*2)
                                        this.context.fill()
                                    }
                                    if (this.hovered)hovering = true
                                },
                                update() {
                                    this.dt += 1 / 25
                                    if (this.dt > 0.25 && this.pressed) {
                                        this.dt = 0
                                        if (kontra.getStoreItem('soundsSetting'))newHit.play()
                                        createMenuFadingText(canvas.width / 2, canvas.height / 2, 'Setting saved.')
                                        if (this.toggled && this.hovered) this.toggled = false
                                        else if (!this.toggled && this.hovered) this.toggled = true
                                        kontra.setStoreItem('newAgePadToggled', this.toggled)
                                        kontra.setStoreItem('pianoToggled', false)
                                        kontra.setStoreItem('guitarToggled', false)
                                        kontra.setStoreItem('organToggled', false)
                                        kontra.setStoreItem('sinwaveToggled', false)
                                        intrumentsDiv.children[0].toggled = false
                                        intrumentsDiv.children[1].toggled = false
                                        intrumentsDiv.children[2].toggled = false
                                        intrumentsDiv.children[3].toggled = false
                                        intrumentsDiv.children[5].toggled = false
                                    }
                                }
                            }),
                        ]
                    }),
                    settingsPage1Button = kontra.Button({
                        x: canvas.width / 2 - 165,y: canvas.height - 100,width: 50,height: 50,anchor:center,
                        render() {
                            if (!this.hovered)this.context.strokeStyle = 'white'
                            if (this.hovered)this.context.strokeStyle = '#afa'
                            this.context.beginPath()
                            this.context.lineWidth = 8
                            this.context.rect(0,0,this.width,this.height)
                            this.context.stroke()
                            this.context.closePath()
                            this.context.beginPath()
                            this.context.font = '32px Arial'
                            this.context.fillStyle = 'white'
                            this.context.fillText('<',15,35)
                            this.context.fill()
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.pressed) {
                                restartSettingsScene()
                                currentScene = settingsScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                        }
                    }),
                ]
            })
        }
        let settingsScene = null
        let settingsPage2Scene = null
        restartSettingsScene()
        function restartGameModeScene() {
            gameModeScene = kontra.Scene({
                objects: [
                    qu = kontra.Button({
                        x: 50, y: 55,
                        anchor: center, dt: 0,
                        text: {
                            text: '?',
                            color: 'cyan', anchor: center,
                            font: '32px Arial',
                            opacity: 0.3
                        },
                        width: 50, height: 50, opacity: 0.5, render() {
                            this.context.fillStyle = '#111'
                                    if (this.hovered) this.dt += 1 / 100
                                    if (!this.hovered) this.context.strokeStyle = 'rgba(0,0,0,0)'
                                    if (this.hovered) this.context.strokeStyle = 'cyan'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    //this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed && this.dt > 0.25) {
                                        currentScene = camera
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                        kontra.setStoreItem('theSecondSecret',true)
                                        player.x = 125
                                        player.y = 100
                                        insue5TH()

                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (this.hovered)hovering = true
                                    if (!this.hovered) this.playSound = true
                                }
                            }),
                    gamemodeDiv = kontra.Grid({
                        x: canvas.width / 2,
                        y: canvas.height / 2,
                        justify: 'center',
                        anchor: center,
                        rowGap: 25,
                        children: [
                            storyMode = kontra.Button({
                                anchor: center, dt: 0,
                                text: {
                                    text: 'story',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 200, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (this.hovered) this.dt += 1 / 100
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed && this.dt > 0.25) {
                                        player.x = 125
                                        player.y = 100
                                        currentScene = camera
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                        //this.textNode.font = '48px Arial'
                                    }
                                    if (this.hovered)hovering = true
                                    if (!this.hovered) {
                                        this.playSound = true
                                        //if (this.textNode.font != '32px Arial') this.textNode.font = '32px Arial'
                                    }
                                    if (this.hovered) if (this.width < 250) this.width += 10
                                    if (!this.hovered) if (this.width > 200) this.width -= 8
                                }
                            }),
                            endlessMode = kontra.Button({
                                anchor: center,
                                text: {
                                    text: 'endless',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 200, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) {
                                        if (kontra.getStoreItem('beatenGames') > 1) this.context.strokeStyle = '#bfaaff'
                                        else {this.context.strokeStyle = 'red'}
                                    }
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed&& !kontra.getStoreItem('beatenGames') > 1) {
                                        currentScene = camera
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                        //this.textNode.font = '48px Arial'
                                    }
                                    if (!this.hovered && !kontra.getStoreItem('beatenGames') > 1) {
                                        this.playSound = true
                                        //if (this.textNode.font != '32px Arial') this.textNode.font = '32px Arial'
                                    }
                                    if (this.hovered)hovering = true
                                    if (this.hovered) if (this.width < 250) this.width += 10
                                    if (!this.hovered) if (this.width > 200) this.width -= 8
                                }
                            }),
                            challenges = kontra.Button({
                                anchor: center,
                                playSound: true,
                                text: {
                                    text: 'challenges',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 200, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartChallengeScene()
                                        currentScene = challengeScene
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                        //this.textNode.font = '48px Arial'
                                    }
                                    if (!this.hovered) {
                                        this.playSound = true
                                        //if (this.textNode.font != '32px Arial') this.textNode.font = '32px Arial'
                                    }
                                    if (this.hovered)hovering = true
                                    if (this.hovered) if (this.width < 250) this.width += 10
                                    if (!this.hovered) if (this.width > 200) this.width -= 8
                                }
                            }),
                            /*
                            multi = kontra.Button({
                                anchor: center,
                                playSound: true,
                                text: {
                                    text: 'multiplayer',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 200, height: 60, render() {
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartMultplayerScene()
                                        currentScene = MultiplayerScene
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIClick.wav').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIHover.wav').play()
                                        //this.textNode.font = '48px Arial'
                                    }
                                    if (!this.hovered) {
                                        this.playSound = true
                                        //if (this.textNode.font != '32px Arial') this.textNode.font = '32px Arial'
                                    }
                                    if (this.hovered)hovering = true
                                    if (this.hovered) if (this.width < 250) this.width += 10
                                    if (!this.hovered) if (this.width > 200) this.width -= 8
                                }
                            }),*/
                            backButton = kontra.Button({
                                anchor: center, dt: 0,
                                text: {
                                    text: 'back',
                                    color: 'white', anchor: center,
                                    font: '32px Arial'
                                },
                                width: 200, height: 60, render() {
                                    if (this.pressed) this.dt += 1 / 100
                                    this.context.fillStyle = '#111'
                                    if (!this.hovered) this.context.strokeStyle = 'white'
                                    if (this.hovered) this.context.strokeStyle = '#afa'
                                    this.context.lineWidth = 4
                                    this.context.beginPath()
                                    this.context.rect(0, 0, this.width, this.height)
                                    this.context.fill()
                                    this.context.stroke()
                                    this.context.closePath()
                                    if (this.pressed) {
                                        restartMenuScene()
                                        currentScene = menuScene
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    }
                                    if (this.hovered && this.playSound) {
                                        this.playSound = false
                                        if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                                    }
                                    if (this.hovered)hovering = true
                                    if (!this.hovered) this.playSound = true
                                    if (this.hovered) if (this.width < 250) this.width += 10
                                    if (!this.hovered) if (this.width > 200) this.width -= 8
                                }
                                
                            })
                        ]
                    }),
                ]
            })
        }
        let multiplayerScene = null
        function restartMultplayerScene() {
            multiplayerScene = kontra.Scene({
                objects: [
                    menuText = kontra.Text({
                        x: canvas.width / 2, y: canvas.height / 5,
                        anchor: center, text: 'MULTIPLAYER', color: 'white', font: '64px Arial'
                    }),
                    idEnter = kontra.Button({
                        entered: false,
                        subText: '',
                        inputKeys: {
                            margin: 0,
                        },
                        x: canvas.width / 2, y: canvas.height / 2, anchor: center, dt: 0,
                        // text: {
                        //     text: 'engineer',
                        //     color: 'white', anchor: center,
                        //     font: '32px Arial'
                        // },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            this.context.strokeStyle = 'white'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            if (this.entered) this.context.rect(25+this.inputKeys.margin,this.height/4,1,this.height/2)
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            
                            this.context.fillStyle = 'white'
                            this.context.beginPath()
                            this.context.fillText('ENTER ROOM ID',0,-5)
                            this.context.fill()
                            this.context.closePath()
                            
                            this.context.fillStyle = 'white'
                            this.context.beginPath()

                            this.context.fillText(this.subText,10,40)
                            this.context.fill()
                            this.context.closePath()
                            //if (this.hovered && this.playSound) {
                                //this.playSound = false
                                //if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIHover.wav').play()
                            //}
                            //if (!this.hovered) this.playSound = true
                            //if (this.hovered)hovering = true
                            //if (this.hovered) if (this.width < 350) this.width += 10
                            //if (!this.hovered) if (this.width > 300) this.width -= 8
                            if (this.pressed) {
                                this.entered = true
                            }
                            if (this.hovered) {
                                overrideHover = true
                            }
                            if (this.entered) {
                                this.dt += 1/100
                                if (this.dt > 0.25) {
                                    if (kontra.keyPressed('a')) {
                                        this.inputKeys.margin += 17
                                        this.subText += 'a'
                                        this.dt = 0
                                    }
                                    if (kontra.keyPressed('b')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText.push('b')
                                    }
                                    if (kontra.keyPressed('c')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText += 'c'
                                    }
                                    if (kontra.keyPressed('d')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText += 'd'
                                    }
                                    if (kontra.keyPressed('e')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText += 'e'
                                    }
                                    if (kontra.keyPressed('f')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText += 'f'
                                    }
                                    if (kontra.keyPressed('g')) {
                                        this.inputKeys.margin += 17
                                        this.dt = 0
                                        this.subText += 'g'
                                    }
                                }
                                
                            }
                        }
                    }),
                    backButton = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - canvas.height / 7, anchor: center, dt: 0,
                        text: {
                            text: 'back',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 200, height: 60, render() {
                            if (this.pressed) this.dt += 1 / 100
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                restartGameModeScene()
                                currentScene = gameModeScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIClick.wav').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('./sounds/sfx/UIHover.wav').play()
                            }
                            if (!this.hovered) {
                                this.playSound = true
                                
                            }
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 250) this.width += 10
                            if (!this.hovered) if (this.width > 200) this.width -= 8
                        }
                    })
                ]
            })
        }
        let gameModeScene = null
        restartGameModeScene()
        function createHoverText(x,y,ttl=5,text='sample text',width=100,height=50) {
            let hover = kontra.Sprite({
                x:x,y:y,width:width,height:height,ttl:ttl,anchor:center,update() {
                    this.ttl = 0
                    challengeScene.remove(this)
                },
                render() {
                    this.context.fillStyle = 'black'
                    this.context.strokeStyle = 'white'
                    this.context.lineWidth = 4
                    this.context.beginPath()
                    this.context.rect(this.width/2,this.height/2,this.width,this.height)
                    this.context.fill()
                    this.context.stroke()
                }
            })
            hoverText.push(hover)
            challengeScene.add(hover)
        }
        function restartChallengeScene() {
            challengeScene = kontra.Scene({
                objects: [
                    menuText = kontra.Text({
                        x: canvas.width / 2, y: canvas.height / 5,
                        anchor: center, text: 'CHALLENGES', color: 'white', font: '64px Arial'
                    }),
                    engineer = kontra.Button({
                        x: canvas.width / 2, y: (canvas.height / 3.5) + 10, anchor: center, dt: 0,
                        text: {
                            text: 'engineer',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            if (this.hovered) this.dt += 1 / 100
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = 'lightblue'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed && this.dt > 0.25) {
                                currentScene = camera
                                player.color = 'lightblue'
                                player.stats.primary.range = 50
                                player.stats.primary.damage = 3
                                player.stats.primary.attackSpeed = 140
                                player.stats.primary.autoturret = true
                                player.stats.primary.homing.active = true
                                player.stats.primary.projAmount = 0
                                maxDrones = 2 + kontra.getStoreItem('amountOwnedMaxDrones')
                                maxTurrets = 4 + kontra.getStoreItem('amountOwnedMaxTurrets')
                                player.class = 'engi'
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                
                                    player.x = 125
                                    player.y = 100
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 350) this.width += 10
                            if (!this.hovered) if (this.width > 300) this.width -= 8
                        }
                    }),
                    minigunner = kontra.Button({
                        x: canvas.width / 2, y: canvas.height / 2.5, anchor: center,
                        text: {
                            text: 'minigunner',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#bfaaff'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                currentScene = camera
                                player.stats.primary.attackSpeed = 40
                                //player.stats.primary.projAmount += 1
                                player.stats.primary.spread += 20
                                player.stats.primary.damage = 0.5
                                player.stats.base.maxHealth = 20
                                player.color = '#bfaaff'
                                turretClasses = ['minigunner']
                                droneClasses = ['minigunner']
                                maxDrones += 1
                                player.class = 'minigun'
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                    player.x = 125
                                    player.y = 100
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 350) this.width += 10
                            if (!this.hovered) if (this.width > 300) this.width -= 8
                        }
                    }),
                    flamer = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - canvas.height / 2, anchor: center,
                        text: {
                            text: 'flamethrower',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = 'coral'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                currentScene = camera
                                
                                // ADD THIS AFTER
                                player.stats.primary.ignite.active = true
                                // ADD THIS AFTER
                                
                                player.stats.primary.ignite.interval -= 15
                                player.stats.primary.range -= 10
                                player.stats.primary.attackSpeed -= 30
                                player.stats.primary.damage = 0
                                player.stats.primary.spread += 15
                                
                                // REMOVE THIS AFTER DONE
                                //player.stats.primary.poison.active = true
                                // REMOVE THIS AFTER DONE
                                
                                player.color = 'coral'
                                droneClasses = ['flamethrower']
                                maxDrones += 1
                                player.class = 'flamer'
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                player.x = 125
                                player.y = 100
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 350) this.width += 10
                            if (!this.hovered) if (this.width > 300) this.width -= 8
                        }
                    }),
                    hell = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - canvas.height / 2.5, anchor: center,
                        text: {
                            text: 'bullet hell',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = 'orange'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                currentScene = camera
                                //player.stats.primary.range -= 50
                                player.stats.primary.attackSpeed -= 70
                                player.color = 'red'
                                droneClasses.push('bullet-hell')
                                turretClasses = ['bullet-hell']
                                player.class = 'bullet-hell'
                                player.width = 10
                                player.height = 10
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                                player.x = 125
                                player.y = 100
                                
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 350) this.width += 10
                            if (!this.hovered) if (this.width > 300) this.width -= 8
                        }
                    }),
                    hullbreaker = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - canvas.height / 3.5 - 10, anchor: center,
                        text: {
                            text: 'hullbreaker',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 300, height: 60, render() {
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                currentScene = camera
                                player.stats.primary.range = 0
                                player.stats.primary.attackSpeed += 999999999999999
                                player.stats.primary.damage += 50
                                player.stats.primary.spread = 0
                                player.stats.base.maxHealth += 50
                                player.stats.base.regenInterval -= 100
                                player.color = '#afa'
                                player.class = 'hullbreaker'
                                droneClasses = ['hullbreaker']
                                player.x = 125
                                player.y = 100
                                maxDrones += 2
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) this.playSound = true
                            if (this.hovered)hovering = true
                            if (this.hovered) {
                                if (this.width < 350) this.width += 10
                                //createHoverText(kontra.getPointer().x,kontra.getPointer().y)
                                
                            }
                            if (!this.hovered) if (this.width > 300) this.width -= 8
                        }
                        
                    }),
                    backButton = kontra.Button({
                        x: canvas.width / 2, y: canvas.height - canvas.height / 7, anchor: center, dt: 0,
                        text: {
                            text: 'back',
                            color: 'white', anchor: center,
                            font: '32px Arial'
                        },
                        width: 200, height: 60, render() {
                            if (this.pressed) this.dt += 1 / 100
                            this.context.fillStyle = '#111'
                            if (!this.hovered) this.context.strokeStyle = 'white'
                            if (this.hovered) this.context.strokeStyle = '#afa'
                            this.context.lineWidth = 4
                            this.context.beginPath()
                            this.context.rect(0, 0, this.width, this.height)
                            this.context.fill()
                            this.context.stroke()
                            this.context.closePath()
                            if (this.pressed) {
                                restartGameModeScene()
                                currentScene = gameModeScene
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIClick.wav?raw=true').play()
                            }
                            if (this.hovered && this.playSound) {
                                this.playSound = false
                                if (kontra.getStoreItem('soundsSetting'))new Audio('https://github.com/04-0/unnamed-dungeon-game/blob/main/dungeon%20game/UIHover.wav?raw=true').play()
                            }
                            if (!this.hovered) {
                                this.playSound = true
                                
                            }
                            if (this.hovered)hovering = true
                            if (this.hovered) if (this.width < 250) this.width += 10
                            if (!this.hovered) if (this.width > 200) this.width -= 8
                        }
                    })
                ]
            })
        }
        let challengeScene = null
        restartChallengeScene()
        let currentScene = loadingScene
        let camera = kontra.Scene({
            id: 'game',
            objects:[],
            cullObjects: true,
        })
        let scenes = [loadingScene, menuScene, gameModeScene, camera, challengeScene, settingsScene]
        let allScenes = [loadingScene,menuScene,gameModeScene,camera,challengeScene,settingsScene,settingsPage2Scene,multiplayerScene,shopScene,pageTwoShop,pageFourAch,pageTwoShop,pageThreeAch,achScene]
        //shopScene.add(controller)
        function playerStats() {
            return {
                base: {
                    health: 40,
                    maxHealth: 40,
                    perRegen: 2,
                    regenInterval: 350,
                    regen: 0,
                    defense: 0,
                    speedMult: 2,
                },
                primary: {
                    damage: 3 + kontra.getStoreItem('amountOwnedDamage'),
                    attackSpeed: 90 - kontra.getStoreItem('amountOwnedAttackSpeed'), // 100
                    atkSpeedDT: 0,
                    range: 50 + kontra.getStoreItem('amountOwnedRange'),
                    projSpeed: 5,
                    projAmount: 1,
                    spread: 0,
                    pierces: 1,
                    autoturret: false,
                    explosion: {
                        knockback: 0.6,
                        radius: 0,
                        initialDamage: 5,
                        radialDiffusion: 0.03,
                        ignite: false,
                    },
                    poison: {
                        active: false,
                        damage: 4,
                        interval: 1 / 100,
                        pois: 0,
                    },
                    lifesteal: {
                        active: false,
                        heal: 1, // health healed per hit
                        chance: 10
                    },
                    ignite: {
                        active: false,
                        damage: 0.05,
                        interval: 30
                    },
                    homing: {
                        active: false,
                        rotationSpeed: 1,
                    }
                },
                secondary: {
                    damage: 1,
                    attackSpeed: 1 / 5,
                    range: 20,
                    projSpeed: 2,
                    spread: 0.4,
                    pierces: 1,
                    autoturret: true,
                    ignite: {
                        damage: 3,
                        interval: 1 / 150,
                        ign: 0,
                    }
                },
                abilities: {
                    impulse: {
                        active: false,
                        key: 'e',
                        radius: 175,
                        charges: 1,
                        damage: 0.03,
                        knockback: 2,
                        cooldown: 500,
                        dt: 0,
                    },
                    bulletHell: {
                        active: false,
                        key: 'y'
                    },
                    massiveExplosion: {
                        active: false,
                        key: 't'
                    },
                    superBuff: {
                        active: 'false',
                        key: 'u'
                    }
                },
                deployables: {
                    mine: {
                        unlocked: false,
                        deployDT: 0,
                        deployInterval: 500
                    },
                    turret: {
                        unlocked: false,
                        deployDT: 0,
                        deployInterval: 1 / 1000
                    },
                    healer: {
                        unlocked: false,
                        deployDT: 0,
                    }
                },
                other: {
                    trailBurns: false,
                    savingGrace: false,
                }
            }
        }
        function randRGB() {
            return 'rgb(' + kontra.randInt(0, 255) + ',' + kontra.randInt(0, 255) + ',' + kontra.randInt(0, 255) + ')'
        }
        function loopBoss1() {
            if (!stopLoopingBoss1) {
                let aud = new Audio('./sounds/music/boss1LOOP.mp3')
                aud.play()
                cleanupBOSS1.push(aud)
                setTimeout(loopBoss1, 25200)
            }
        }
        function loopBoss2() {
            if (!stopLoopingBoss2) {
                let aud = new Audio('./sounds/music/boss2LOOP.mp3')
                aud.play()
                cleanupBOSS2.push(aud)
                setTimeout(loopBoss2, 25700)
            }
        }
        function loopBoss3() {
            if (!stopLoopingBoss3) {
                let aud = new Audio('./sounds/music/boss3LOOP.mp3') 
                aud.play()
                cleanupBOSS3.push(aud)
                //setTimeout(loopBoss3)
            }
        }
        function loopBoss4() {
            if (!stopLoopingBoss4) {
                let aud = new Audio('./sounds/music/boss4LOOP.mp3') 
                aud.play()
                cleanupBOSS4.push(aud)
                //setTimeout(loopBoss3)
            }
        }
        function loopBoss5() {
            let aud = new Audio('./sounds/music/boss5LOOP.mp3')
            aud.play()
            cleanupBOSS5.push(aud)
            if (!stopLoopingBoss5) setTimeout(loopBoss5, 42650)
        }
        // the first boss
        function createBoss() {
            boss1Spawned = true
            //document.body.style.background = 'red'
            let boss = kontra.Sprite({
                x: canvas.width * 2,
                y: -250, anchor: center,
                width: canvas.width / 2, boss: '1',
                height: canvas.width / 2, giantLaserDT: 0,
                color: 'red', type: 'boss',
                ignited: false,
                ign: 0,
                directionFiring: 'bottom',
                directions: ['left','left','right','right','top','top','bottom','bottom'],
                switchDirection: 0,
                particleEffects: 0,
                stats: {
                    base: {
                        // 1,000,000
                        health: 15000,//5k
                        maxHealth: 15000,
                    }, unlockables: {
                        inf: false,
                        mult: false,
                    }
                },
                dt: 0, phase: 'entering',
                //phases: ['bullet-hell', 'summon', 'opposite', 'nothing','top','bottom'],
                phases: ['top', 'top', 'bottom', 'bottom', 'summon', 'opposite', 'both'],
                //phases: ['opposite'],
                summon: 'default', enraged: false,
                timeToNextPhase: 50, summonDT: 0, laDT: 0,
                update() {
                    currentTargeting = this
                    this.particleEffects += 1/5
                    this.switchDirection += 1/2000
                    if (this.switchDirection > .25) {
                        this.switchDirection = 0
                        this.directionFiring = this.directions[kontra.randInt(0,this.directions.length-1)]
                    }
                    if (this.particleEffects > .25) {
                        if (this.directionFiring == 'right')createIntense(this.x + this.width/2,kontra.randInt(this.y-this.height/2,this.y+this.height/2),2,0,kontra.randInt(5,10),kontra.randInt(5,10),'red',kontra.randInt(100,150))
                        if (this.directionFiring == 'left')createIntense(this.x - this.width/2,kontra.randInt(this.y-this.height/2,this.y+this.height/2),-2,0,kontra.randInt(5,10),kontra.randInt(5,10),'red',kontra.randInt(100,150))
                        if (this.directionFiring == 'top')createIntense(kontra.randInt(this.x-this.width/2,this.x+this.width/2),this.y-this.width/2,0,-2,kontra.randInt(5,10),kontra.randInt(5,10),'red',kontra.randInt(100,150))
                        if (this.directionFiring == 'bottom')createIntense(kontra.randInt(this.x-this.width/2,this.x+this.width/2),this.y+this.width/2,0,2,kontra.randInt(5,10),kontra.randInt(5,10),'red',kontra.randInt(100,150))
                    }
                    if (this.stats.base.health < this.stats.base.maxHealth / 2 && !this.enraged) {
                        this.enraged = true
                        this.phases.push('touhou')
                        createFadingText(
                            canvas.width * 2,
                            canvas.height / 2,
                            'ENRAGED MODE',
                            6, 'bold 64px Arial', 'white'
                        )
                        createFadingText(
                            canvas.width * 2,
                            canvas.height / 2 + 40,
                            'uh oh',
                            6, '32px Arial', 'white'
                        )
                    }
                    //if (this.y < canvas.width/2) this.y += 100
                    this.timeToNextPhase += 0.1
                    if (this.phase == 'entering') {
                        //this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 }) * 2
                    }
                    this.dt += 1/50
                    if (this.phase != 'opposite') {
                        this.dt += 1 / 100

                    }
                    if (this.phase == 'bullet-hell') {
                        enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(180),
                            25,
                            3,
                            'red',
                            300,
                            {
                                damage: 10,
                                speed: kontra.randInt(3, 6),
                                piercesLeft: 1,
                            }
                        )
                        enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(0),
                            25,
                            3,
                            'red',
                            300,
                            {
                                damage: 10,
                                speed: kontra.randInt(3, 6),
                                piercesLeft: 1,
                            }
                        )
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        // if (this.dt > 0.25) {
                        //     createEnemy(this.x, this.y, 10, 25, '#bfaaff', {
                        //         faction: {
                        //             wantedTarget: player,
                        //             targetedArr: allies,
                        //             alliedArr: enemies,
                        //         }, weapons: {
                        //             damage: 25,
                        //             range: 1,
                        //             attackSpeed: 1 / 100,
                        //             atkSpeedDT: 0,
                        //         }, base: {
                        //             health: 200,
                        //             maxHealth: 200,
                        //             defense: 0 + globalEnemy.defenseMult,
                        //             healingSpeed: 0,
                        //             speed: 3 + globalEnemy.speedMult,
                        //             rotationSpeed: 0,
                        //             rewards: {
                        //                 xp: 0,
                        //                 gold: 0,
                        //             }
                        //         },
                        //     })
                        // }
                    }
                    if (this.phase == 'touhou') {
                        enemyLaser(
                            canvas.width * 2 + canvas.width / 2,
                            kontra.randInt(-15, canvas.height),
                            kontra.degToRad(180),
                            10,
                            2,
                            'red',
                            600,
                            {
                                damage: 1,
                                speed: kontra.randInt(3, 6),
                                piercesLeft: 1,
                            }
                        )
                        enemyLaser(
                            canvas.width * 2 - canvas.width / 2,
                            kontra.randInt(0, canvas.height),
                            kontra.degToRad(0),
                            10,
                            2,
                            'red',
                            600,
                            {
                                damage: 1,
                                speed: kontra.randInt(3,6),
                                piercesLeft: 1,
                            }
                        )
                        // enemyLaser(
                        //     kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        //     kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        //     kontra.degToRad(180),
                        //     5,
                        //     1,
                        //     'red',
                        //     900,
                        //     {
                        //         damage: 0.3,
                        //         speed: kontra.randInt(1, 3),
                        //         piercesLeft: 1,
                        //     }
                        // )
                        // enemyLaser(
                        //     kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        //     kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        //     kontra.degToRad(180),
                        //     5,
                        //     1,
                        //     'red',
                        //     900,
                        //     {
                        //         damage: 0.3,
                        //         speed: kontra.randInt(1, 3),
                        //         piercesLeft: 1,
                        //     }
                        // )
                    }
                    if (this.phase == 'summon') {
                        this.summonDT += 1 / 400
                    }
                    if (this.phase == 'top' || this.phase == 'bottom') {
                        this.laDt += 1 / 5000
                    }
                    if (this.ignited) {
                        this.ign += 1 / player.stats.primary.ignite.interval
                        if (this.ign > 0.25) {
                            this.stats.base.health -= player.stats.primary.ignite.damage * 2
                            this.ign = 0
                            createIntense(kontra.randInt(this.x-this.width/2,this.x+this.width/2),this.y-this.width/2,0,-2,kontra.randInt(10,15),kontra.randInt(10,15),'orange',kontra.randInt(100,150))
                            createIntense(kontra.randInt(this.x-this.width/2,this.x+this.width/2),this.y-this.width/2,0,-2,kontra.randInt(10,15),kontra.randInt(10,15),'orange',kontra.randInt(100,150))
                        }
                        enemyDead(this)
                    }
                    if (this.summonDT > 0.25) {
                        this.summonDT = 0
                        createEnemy(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), kontra.randInt(this.y - this.height / 2, this.y + this.height / 2), 15, 15, 'red', {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 4,
                                range: 1,
                                attackSpeed: 1 / 250,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 30,
                                maxHealth: 30,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,
                                speed: 1,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            }
                        })
                    }
                    if (this.timeToNextPhase > 75) {
                        this.timeToNextPhase = 0
                        this.phase = this.phases[kontra.randInt(0, this.phases.length - 1)]
                        if (this.phase == 'both') {
                            createIntense(canvas.width * 2 + canvas.width * 2, this.y + this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 3, 0.6)
                            createIntense(canvas.width * 2 + canvas.width, this.y + this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 2, 0.6)
                            setTimeout(() => {
                                enemyLaser(canvas.width * 2 + canvas.width, this.y + this.height, kontra.degToRad(180), canvas.width, canvas.height, 'red', canvas.width * 2, {
                                    damage: 500,
                                    speed: 2,
                                    piercesLeft: 1,
                                })
                            }, 3000)
                            createIntense(canvas.width * 2 + canvas.width * 2, this.y - this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 3, 0.6)
                            createIntense(canvas.width * 2 + canvas.width, this.y - this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 2, 0.6)
                            setTimeout(() => {
                                enemyLaser(canvas.width * 2 + canvas.width, this.y - this.height, kontra.degToRad(180), canvas.width, canvas.height, 'red', canvas.width * 2, {
                                    damage: 500,
                                    speed: 2,
                                    piercesLeft: 1,
                                })
                            }, 3000)
                        }
                        if (this.phase === 'top' || this.phase === 'bottom') {
                            if (player.y <= this.y) {
                                this.phase = 'top'
                                createIntense(canvas.width * 2 + canvas.width * 2, this.y - this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 3, 0.6)
                                createIntense(canvas.width * 2 + canvas.width, this.y - this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 2, 0.6)
                                setTimeout(() => {
                                    enemyLaser(canvas.width * 2 + canvas.width, this.y - this.height, kontra.degToRad(180), canvas.width, canvas.height, 'red', canvas.width * 2, {
                                        damage: 500,
                                        speed: 2,
                                        piercesLeft: 1,
                                    })
                                }, 3000)
                            }
                            if (player.y >= this.y) {
                                this.phase = 'bottom'
                                createIntense(canvas.width * 2 + canvas.width * 2, this.y + this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 3, 0.6)
                                createIntense(canvas.width * 2 + canvas.width, this.y + this.height, -2, 0, canvas.width, canvas.height, 'red', canvas.width * 2, 0.6)
                                setTimeout(() => {
                                    enemyLaser(canvas.width * 2 + canvas.width, this.y + this.height, kontra.degToRad(180), canvas.width, canvas.height, 'red', canvas.width * 2, {
                                        damage: 500,
                                        speed: 2,
                                        piercesLeft: 1,
                                    })
                                }, 3000)
                            }
                        }
                        //let a = 'a'
                        createFadingText(canvas.width * 2, canvas.width / 2, this.phase.toUpperCase(), 6, 'bold 64px Arial', 'white')
                    }
                    if (this.dt > 0.25) {
                        this.dt = 0
                        if (this.directionFiring == 'bottom') {
                            enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            this.y + this.height/2,
                            kontra.degToRad(90),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(0.5, 2),
                                piercesLeft: 1,
                            }
                        )
                            if (this.enraged) {
                                enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            this.y + this.height/2,
                            kontra.degToRad(90),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(0.5, 2),
                                piercesLeft: 1,
                            }
                        )
                            }
                        }
                        if (this.directionFiring == 'top') {
                            enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            this.y - this.height/2,
                            kontra.degToRad(-90),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(0.5, 2),
                                piercesLeft: 1,
                            }
                        )
                            if (this.enraged) {
                                enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            this.y - this.height/2,
                            kontra.degToRad(-90),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(0.5, 2),
                                piercesLeft: 1,
                            }
                        )
                            }
                        }
                        if (this.directionFiring == 'right') {
                            enemyLaser(
                            this.x + this.width / 2,
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            0,
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(1, 2),
                                piercesLeft: 1,
                            }
                        )
                            if (this.enraged) {
                                enemyLaser(
                            this.x + this.width / 2,
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            0,
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(1, 2),
                                piercesLeft: 1,
                            }
                        )
                            }
                        }
                        if (this.directionFiring == 'left') {
                        enemyLaser(
                            this.x - this.width / 2,
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(180),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(1, 2),
                                piercesLeft: 1,
                            })
                            if (this.enraged) {
                                enemyLaser(
                            this.x - this.width / 2,
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(180),
                            25,
                            2,
                            'red',
                            200,
                            {
                                damage: 25,
                                speed: kontra.randInt(1, 2),
                                piercesLeft: 1,
                            })
                            }
                        } 
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    this.context.shadowBlur = 60
                    this.context.shadowColor = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            let bossHealthbar = kontra.Sprite({
                x: canvas.width * 2, y: canvas.width / 2, anchor: center, render() {

                    this.context.fillStyle = 'white'
                    this.context.beginPath()
                    this.context.lineWidth = 8
                    this.context.rect(-(boss.stats.base.health / 10) / 2, 0, boss.stats.base.health / 10, 10)
                    this.context.rect(-(boss.stats.base.health / 10) / 2, -64, boss.stats.base.health / 10, 10)
                    this.context.fill()
                    this.context.closePath()
                    if (boss.ttl <= 0) this.ttl = 0
                }
            })
            camera.add(boss, bossHealthbar)
            enemies.push(boss)
            cleanupHealthbars.push(bossHealthbar)
        }
        function insue5TH() {
            resetToDefualt()
            windAmount = 0
            let boss5New = new createFithBoss()
            canvas.style.background = 'transparent'
            boss5Spawned = true
            playingMusic = true
            stopLoopingBoss5 = false
            neededEnemies += 9999999999999
            camera.remove(spawners)
            //secret1.play()
            if (kontra.getStoreItem('musicSetting'))boss5INTRO.play()
            //boss5INTRO.paused = loopBoss5()
            createEnemySpawner(canvas.width * 2, canvas.height, 1 / 200, canvas.width, 1, 'transparent', {
                x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                width: 5,
                height: 10,
                color: boss5Color,
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 2,
                        range: 1,
                        attackSpeed: 1 / 50,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 5,
                        maxHealth: 5,
                        defense: 0 + globalEnemy.defenseMult,
                        regen: 0,
                        trigger: true,
                        speed: 3.5,
                        rotationSpeed: 0.2,
                        rewards: {
                            xp: 0,
                            gold: 0,
                        }
                    },
                }
            })
        }
        function insue2ND() {
            createSecondBoss()
                boss2Spawned = true
                playingMusic = true
                stopLoopingBoss2 = false
                if (kontra.getStoreItem('musicSetting'))boss2INTRO.play()
                //canvas.classList.add('theFinale')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'TANK BOSS',
                    8, 'bold 64px Arial', 'purple'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'very tanky',
                    8, 'bold 32px Arial', 'purple'
                )
                camera.remove(spawners)
                camera.remove(activeTiles)
                createSecondBoss()
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 200, 50, canvas.height, '#bfaaff', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 70,
                    height: 70,
                    color: '#bfaaff',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 1,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 50,
                            maxHealth: 10,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 0.4,
                            rotationSpeed: .3,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 200, 50, canvas.height, '#bfaaff', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 70,
                    height: 70,
                    color: '#bfaaff',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 1,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 50,
                            maxHealth: 5,
                            defense: 0 + globalEnemy.defenseMult,
                            trigger: true,
                            speed: 0.4,
                            rotationSpeed: .3,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, 0, 1 / 120, canvas.width, 50, '#bfaaff', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 70,
                    height: 70,
                    color: '#bfaaff',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 1,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 50,
                            maxHealth: 5,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 0.4,
                            rotationSpeed: .3,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 200, canvas.width, 50, '#bfaaff',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 70,
                        height: 70,
                        color: '#bfaaff',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 1,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 50,
                                maxHealth: 5,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,
                                trigger: false,
                                speed: 0.4,
                                rotationSpeed: .3,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
        }
        function createSecondBoss() {
            boss2Spawned = true
            document.body.style.background = '#bfaaff'
            let boss = kontra.Sprite({
                x: canvas.width * 2, anchor: center,
                y: -250, anchor: center,
                width: canvas.width / 2,
                height: canvas.width / 2, enraged: false,
                color: '#bfaaff', boss: '2', type: 'boss',
                stats: {
                    base: {
                        // 1,000,000
                        health: 25000,
                        maxHealth: 25000,
                    }, unlockables: {
                        inf: false,
                        mult: false,
                    }
                },
                dt: 0, phase: 'entering',
                phases: ['bullet-hell', 'summon', 'bassler', 'rain', 'fortify'],
                summon: 'a', meleeDT: 0,
                timeToNextPhase: 0,
                update() {
                    currentTargeting = this
                    if (this.stats.base.health < this.stats.base.maxHealth / 2 && !this.enraged) {
                        this.enraged = true
                        this.phases.push('heal')
                        createFadingText(
                            canvas.width * 2,
                            canvas.height / 2,
                            'ENRAGED MODE',
                            6, 'bold 64px Arial', 'white'
                        )
                        createFadingText(
                            canvas.width * 2,
                            canvas.height / 2 + 40,
                            'uh oh',
                            6, '32px Arial', 'white'
                        )
                        for (let i = 0; i > 15; i++) {
                            enemyLaser(this.x, this.y, kontra.randInt(-5, 5), 25, 5, this.color, 300, {
                                damage: 25,
                                speed: 3,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 0.1,
                            })
                        }
                    }
                    this.meleeDT += 1 / 70
                    if (this.meleeDT > 0.25) {
                        this.meleeDT = 0
                        enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(180),
                            kontra.randInt(25, 45), 5,
                            this.color,
                            canvas.width, {
                            damage: 30,
                            speed: 2,
                            piercesLeft: 1,
                        }

                        )
                        enemyLaser(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            kontra.degToRad(180),
                            20, 3,
                            this.color,
                            canvas.width / 2, {
                            damage: 15,
                            speed: 1,
                            piercesLeft: 1,
                        }

                        )
                    }
                    //if (this.y < canvas.width/2) this.y += 100
                    this.timeToNextPhase += 0.1
                    if (this.phase == 'entering') {
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.dt += 1 / 500
                    }
                    if (this.phase == 'rain') {
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        enemyLaser(
                            kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width),
                            0,
                            kontra.degToRad(135),
                            kontra.randInt(7, 20), 3, this.color,
                            500, {
                            damage: 3,
                            speed: kontra.randInt(1, 4),
                            piercesLeft: 1
                        }
                        )
                        enemyLaser(
                            kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width),
                            0,
                            kontra.degToRad(135),
                            kontra.randInt(7, 20), 3, this.color,
                            500, {
                            damage: 3,
                            speed: kontra.randInt(1, 4),
                            piercesLeft: 1
                        }
                        )
                    }
                    if (this.phase == 'bullet-hell') {
                        this.rotation += 0.05
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        enemyLaser(this.x, this.y, this.rotation, 15, 3, this.color, 400, {
                            damage: 3,
                            speed: 4,
                            piercesLeft: 1
                        })
                        enemyLaser(this.x, this.y, this.rotation - kontra.degToRad(90), 15, 3, this.color, 400, {
                            damage: 3,
                            speed: 4,
                            piercesLeft: 1
                        })
                        enemyLaser(this.x, this.y, this.rotation + kontra.degToRad(90), 15, 3, this.color, 400, {
                            damage: 3,
                            speed: 4,
                            piercesLeft: 1
                        })
                    }
                    if (this.timeToNextPhase > 75) {
                        this.timeToNextPhase = 0
                        this.phase = this.phases[kontra.randInt(0, this.phases.length - 1)]
                        //let a = 'a'
                        createFadingText(canvas.width * 2, canvas.height / 2, this.phase.toUpperCase(), 6, 'bold 64px Arial', '#bfaaff')
                    } if (this.dt > 0.25) {
                        this.dt = 0
                        if (this.summon == 'default') createEnemy(this.x, this.y, 10, 10, '#bfaaff')
                        {
                            createEnemy(this.x + 10, this.y + 10, 5, 25, '#bfaaff', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 5,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 30,
                                    maxHealth: 30,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0.5,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                    }
                    if (this.phase != 'bullet-hell' && this.rotation != 0) this.rotation = 0
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    this.context.shadowBlur = 60
                    this.context.shadowColor = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.globalAlpha = 0.3
                    this.context.fillRect(-this.width / 2, -this.height / 2, this.width * 2, this.height * 2)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            let bossHealthbar = kontra.Sprite({
                x: canvas.width * 2, y: 200, anchor: center, render() {
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.shadowColor = boss.color
                    this.context.strokeStyle = boss.color
                    //this.context.rect(-20, 40,1, 10)
                    this.context.rect(-canvas.width / 4, 0, canvas.width / 2, 40)
                    this.context.stroke()
                    this.context.closePath()

                    this.context.fillStyle = boss.color
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.rect(-canvas.width / 4, 0, (boss.stats.base.health / canvas.width) * 18.5, 40)
                    this.context.fill()
                    this.context.closePath()
                    if (boss.ttl <= 0) this.ttl = 0
                }
            })
            camera.add(boss, bossHealthbar)
            enemies.push(boss)
            cleanupHealthbars.push(bossHealthbar)
        }
        function createThirdBoss() {
            boss3Spawned = true
            document.body.style.background = '#afa'
            let boss = kontra.Sprite({
                x: canvas.width * 2, anchor: center,
                y: -250, anchor: center, boss: '3',
                width: canvas.width / 2,
                height: canvas.width / 2, type: 'boss',
                color: '#afa',
                stats: {
                    base: {
                        // 1,000,000
                        health: 50000,
                        maxHealth: 50000,
                        regen: 0,
                        perRegen: 100,
                        regenInterval: 1 / 100,
                    }, unlockables: {
                        inf: false,
                        mult: false,
                    }
                },
                dt: 0, phase: 'entering',
                phases: ['aoe heal', 'lifesteal', 'killer', 'heatstopper'],
                summon: 'default',
                timeToNextPhase: 0,
                update() {
                    currentTargeting = this
                    //if (this.y < canvas.width/2) this.y += 100
                    this.timeToNextPhase += 0.1
                    if (this.phase == 'entering') {
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.dt += 1 / 500
                    }
                    if (this.phase == 'bullet-hell') {
                        this.rotation += 0.05
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        if (this.dt > 0.25) {
                            createEnemy(this.x, this.y, 10, 25, '#bfaaff', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 200,
                                    maxHealth: 200,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                    }
                    if (this.timeToNextPhase > 75) {
                        this.timeToNextPhase = 0
                        this.phase = this.phases[kontra.randInt(0, this.phases.length - 1)]
                        //let a = 'a'
                        createFadingText(canvas.width * 2, canvas.height / 2, this.phase.toUpperCase(), 6, 'bold 64px Arial', '#bfaaff')
                    } if (this.dt > 0.25) {
                        this.dt = 0
                        if (this.summon == 'default') createEnemy(this.x, this.y, 10, 10, '#bfaaff')
                        if (this.phase == 'touhou') {
                            createEnemy(this.x, this.y, 5, 25, '#bfaaff', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 75,
                                    maxHealth: 75,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0.5,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                        {
                            createEnemy(this.x + 10, this.y + 10, 5, 25, '#bfaaff', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 75,
                                    maxHealth: 75,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0.5,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    this.context.shadowBlur = 60
                    this.context.shadowColor = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.globalAlpha = 0.3
                    this.context.fillRect(-this.width / 2, -this.height / 2, this.width * 2, this.height * 2)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            let bossHealthbar = kontra.Sprite({
                x: canvas.width * 2, y: 200, anchor: center, render() {
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.shadowColor = boss.color
                    this.context.strokeStyle = boss.color
                    //this.context.rect(-20, 40,1, 10)
                    this.context.rect(-canvas.width / 4, 0, canvas.width / 2, 40)
                    this.context.stroke()
                    this.context.closePath()
                    if (boss.ttl <= 0) this.ttl = 0

                    this.context.fillStyle = boss.color
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.rect(-canvas.width / 4, 0, (boss.stats.base.health / canvas.width) * 18.5, 40)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            camera.add(boss, bossHealthbar)
            enemies.push(boss)
            cleanupHealthbars.push(bossHealthbar)
        }
        function createFourthBoss() {
            boss4Spawned = true
            let boss = kontra.Sprite({
                x: canvas.width * 2, anchor: center,
                y: -250, anchor: center,
                width: canvas.width / 2, boss: '4',
                height: canvas.width / 2, type: 'boss',
                color: '#fff7aa',
                stats: {
                    base: {
                        // 1,000,000
                        health: 50000,
                        maxHealth: 50000,
                        regen: 0,
                        perRegen: 100,
                        regenInterval: 1 / 100,
                    }, unlockables: {
                        inf: false,
                        mult: false,
                    }
                },
                dt: 0, phase: 'entering',
                phases: ['double damage', 'hunt'],
                summon: 'default',
                timeToNextPhase: 0,
                update() {
                    currentTargeting = this
                    //if (this.y < canvas.width/2) this.y += 100
                    this.timeToNextPhase += 0.1
                    if (this.phase == 'entering') {
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.dt += 1 / 500
                    }
                    if (this.phase == 'bullet-hell') {
                        this.rotation += 0.05
                        this.x += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        this.y += kontra.angleToTarget(this, { x: canvas.width * 2, y: canvas.height / 2 })
                        if (this.dt > 0.25) {
                            createEnemy(this.x, this.y, 10, 25, '#fff7aa', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 200,
                                    maxHealth: 200,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                    }
                    if (this.timeToNextPhase > 75) {
                        this.timeToNextPhase = 0
                        this.phase = this.phases[kontra.randInt(0, this.phases.length - 1)]
                        //let a = 'a'
                        createFadingText(canvas.width * 2, canvas.height / 2, this.phase.toUpperCase(), 6, 'bold 64px Arial', '#fff7aa')
                    } if (this.dt > 0.25) {
                        this.dt = 0
                        if (this.summon == 'default') createEnemy(this.x, this.y, 10, 10, '#fff7aa')
                        if (this.phase == 'touhou') {
                            createEnemy(this.x, this.y, 5, 25, '#fff7aa', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 75,
                                    maxHealth: 75,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0.5,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                        {
                            createEnemy(this.x + 10, this.y + 10, 5, 25, '#fff7aa', {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 25,
                                    range: 1,
                                    attackSpeed: 1 / 100,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 75,
                                    maxHealth: 75,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 3 + globalEnemy.speedMult,
                                    rotationSpeed: 0.5,
                                    rewards: {
                                        xp: 0,
                                        gold: 0,
                                    }
                                },
                            })
                        }
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    this.context.shadowBlur = 60
                    this.context.shadowColor = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.globalAlpha = 0.3
                    this.context.fillRect(-this.width / 2, -this.height / 2, this.width * 2, this.height * 2)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            let bossHealthbar = kontra.Sprite({
                x: canvas.width * 2, y: 200, anchor: center, render() {
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.shadowColor = boss.color
                    this.context.strokeStyle = boss.color
                    //this.context.rect(-20, 40,1, 10)
                    this.context.rect(-canvas.width / 4, 0, canvas.width / 2, 40)
                    this.context.stroke()
                    this.context.closePath()
                    if (boss.ttl <= 0) this.ttl = 0
                    this.context.fillStyle = boss.color
                    this.context.beginPath()
                    this.context.lineWidth = 4
                    this.context.shadowBlur = 60
                    this.context.rect(-canvas.width / 4, 0, (boss.stats.base.health / canvas.width) * 18.5, 40)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            document.body.style.background = boss.color
            camera.add(boss, bossHealthbar)
            enemies.push(boss)
            cleanupHealthbars.push(bossHealthbar)
        }
        function create5BossMinion(x,y,w=20,h=25) {
            let bm = kontra.Sprite({
                x: x,y: y,anchor:center,
                color: boss5Color,width:w,height:h,update() {
                    this.advance()
                    this.y += 1.5 + kontra.randInt(-.5,.3)
                    createIntense(this.x,this.y,0,0,this.width/2,this.height/2,this.color,200,1,0,'',{
                        amount: 100,
                        color: this.color
                    },{},{
                        active: true,
                        amount: .2
                    })
                    if (kontra.collides(this,player)) {
                        player.rotation += .3
                    }
                    if (this.y > canvas.height + this.height) camera.remove(this)
                }
            })
            // let bmBarrel = kontra.Sprite({
            //     width: 40,
            //     height: 10,
            //     color: 'cyan',anchor:center,
            //     update() {
            //         this.x = bm.x
            //         this.y = bm.y
            //         angle = kontra.angleToTarget(this, player) - kontra.degToRad(90)
            //         if (this.rotation !== angle) {
            //             delta = angle - this.rotation
            //             if (delta > PI) delta -= TAU;
            //             if (delta < -PI) delta += TAU;
            //             theta = delta > 0 ? .8 : -.8;
            //             this.rotation += kontra.degToRad(theta)
            //         }
            //     },
            // })
            camera.add(bm)
        }
        function createFithBoss() {
            boss5Spawned = true
            // create side-turrets that angle towards the player (one on each side) and has a laser sight to see where they are aiming
            // they will fire a missile that can hurt the boss
            // or just a turret that is 90O and follows the player and fires a straight line of lasers
            let boss = kontra.Sprite({
                x: canvas.width * 2, anchor: center,
                y: -250, anchor: center,
                width: canvas.width / 4, boss: '5',
                height: canvas.width / 4, type: 'boss',
                color: boss5Color,minionDT:0,
                startingPoint: 0,
                stats: {
                    base: {
                        // 1,000,000
                        health: 1000,//50,000
                        maxHealth: 1000,//50,000
                    }, unlockables: {
                        inf: true,
                        mult: false,
                    }
                },
                dt: 0, phase: 'entering',
                phases: ['turrets', 'turrets', 'left', 'right','traffic'],
                summon: 'default', missileDT: 0, boxDT: 0,
                timeToNextPhase: 25, dy: 0, trafficDT: 0,
                update() {
                    this.advance()
                    //if (this.y < canvas.width/2) this.y += 100 
                    this.timeToNextPhase += 0.1
                    this.minionDT += 1/250
                    if (!boss5Killed && boss5Spawned) createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 8, 8, this.color, 100, 1, 0, 'gravity2', { color: this.color, amount: 30 })
                    if (!boss5Killed && boss5Spawned) createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 6, 6, this.color, 125, 1, 0, 'gravity2', { color: this.color, amount: 20 })
                    if (!boss5Killed && boss5Spawned) createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 4, 4, this.color, 150, 1, 0, 'gravity2', { color: this.color, amount: 20 })
                    if (!boss5Killed && boss5Spawned) createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 2, 2, this.color, 175, 1, 0, 'gravity2', { color: this.color, amount: 15 })
                    if (this.phase == 'entering') {
                        if (this.y >= canvas.width / 2) this.dy -= 0.05
                        //if (this.dy < 0) this.dy = 0
                        //this.x += kontra.angleToTarget(this, { x: canvas.width * 2-canvas.width/4, y: canvas.height / 2 })
                        //this.y += kontra.angleToTarget(this, { x: canvas.width * 2-canvas.width/4, y: canvas.height / 2 })
                        this.dt += 1 / 500
                    }
                    if (this.minionDT > 0.25) {
                        this.minionDT = 0
                        //create5BossMinion(kontra.randInt(canvas.width*2-canvas.width/2,canvas.width*2+canvas.width/2),0)
                    }
                    if (this.y < canvas.height / 2 && this.dy < 2) {
                        this.dy += kontra.randInt(0.02, 0.03)
                        createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 10, 10, this.color, 100, 1, 0, 'gravity2', { color: 'cyan', amount: 30 })
                    }
                    if (this.y > canvas.width / 2 && this.dy > -2 && this.phase != 'entering') this.dy -= kontra.randInt(0.02, 0.03)
                    if (this.timeToNextPhase > 100) {
                        this.timeToNextPhase = 0
                        this.phase = this.phases[kontra.randInt(0, this.phases.length - 1)]
                        createFadingText(canvas.width * 2, this.y - this.height / 2, this.phase.toUpperCase(), 6, 'bold 64px Arial', 'cyan')
                        if (this.phase == 'left') {
                            createIntense(this.x - this.width - this.width / 2, canvas.height, 0, -3.5, canvas.height, canvas.width / 2, this.color, 400, 0.5, kontra.degToRad(-90))
                            enemyLaser(this.x - this.width - this.width / 2, canvas.height * 2, 0, canvas.width / 2, canvas.height * 2, this.color, 700, {
                                damage: 100,
                                speed: 0,
                                piercesLeft: 1,
                            })
                        }
                        if (this.phase == 'right') {
                            createIntense(this.x + this.width + this.width / 2, canvas.height, 0, -3.5, canvas.height, canvas.width / 2, this.color, 400, 0.5, kontra.degToRad(-90))
                            enemyLaser(this.x + this.width + this.width / 2, canvas.height * 2, 0, canvas.width / 2, canvas.height * 2, this.color, 700, {
                                damage: 100,
                                speed: 0,
                                piercesLeft: 1,
                            })
                        }
                        if (this.phase == 'turrets') {
                            if (player.x > canvas.width * 2) turret1.x = canvas.width * 2 + canvas.width / 2
                            if (player.x < canvas.width * 2) turret1.x = canvas.width * 2 - canvas.width / 2
                            turret1Barrel.dt = 50
                        }
                    }
                    if (this.phase == 'missiles') this.missileDT += 1 / 200
                    if (this.missileDT > 0.25) {
                        this.missileDT = 0
                        enemyLaser(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 50, kontra.angleToTarget(this, player), 5, 35, this.color, 500, {
                            damage: 25,
                            speed: 2,
                            piercesLeft: 1,
                        }, {
                            rotationSpeed: 1,
                            active: true
                        })
                    }
                    if (this.phase != 'left' || this.phase != 'right') {
                        this.trafficDT += 1 / 60
                    }
                    this.boxDT += 1 / 80
                    if (this.boxDT > 0.25) {
                        enemyLaser(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), kontra.randInt(canvas.height + 25, canvas.height + 50), kontra.degToRad(-90), 15, 15, this.color, 300, {
                            damage: 15,
                            speed: 2,
                            piercesLeft: 1,
                        }, {
                            active: false,
                        })
                        this.boxDT = 0
                    }
                    if (this.trafficDT > 0.25) {
                        if (this.phase == 'traffic') {
                            enemyLaser(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), kontra.randInt(canvas.height + 25, canvas.height + 50), kontra.degToRad(-90), 20, 20, this.color, 300, {
                                damage: 25,
                                speed: 2,
                                piercesLeft: 1,
                            }, {
                                active: false,
                            })
                        }
                        this.trafficDT = 0
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    this.context.shadowBlur = 60
                    this.context.shadowColor = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            let turret1 = kontra.Sprite({
                x: canvas.width * 2 + canvas.width / 2, y: -100,
                width: 75,
                height: 150,
                color: boss.color, anchor: center,
                update() {
                    this.advance()
                    if (boss.phase == 'turrets') {
                        if (this.y < player.y && this.dy < 2 && boss.timeToNextPhase < 95) {
                            this.dy += .002
                            createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 10, 10, this.color, 100, 1, 0, 'gravity2', { color: this.color, amount: 30 })
                        }
                        if (boss.timeToNextPhase > 95 && this.y > -25) boss.timeToNextPhase = 96
                        if (this.y > player.y && this.dy > -2 && boss.timeToNextPhase < 95) this.dy -= kontra.randInt(0.002, 0.004)
                        if (this.y > -100 && this.dy > -2 && boss.timeToNextPhase > 95) this.dy -= kontra.randInt(0.02, 0.04)
                    }
                    if (this.y < -100) {
                        this.y = -100
                        this.dy = 0
                    }
                    if (this.y > canvas.height + 100) {
                        this.y = canvas.height + 100
                        this.dy = 0
                    }
                }
            })
            /*let turret2 = kontra.Sprite({
                x: canvas.width*2-canvas.width/2,y:-100,
                width: 75,
                height: 100,
                color: 'cyan',anchor:center,
                update() {
                    this.advance()
                    if (boss.phase == 'turrets') {
                        if (this.y < canvas.width / 2 && this.dy < 2) {
                            this.dy += kontra.randInt(0.02, 0.03)
                            createIntense(kontra.randInt(this.x - this.width / 2, this.x + this.width / 2), this.y - this.width / 2, 0, kontra.randInt(-8, -9), 10, 10, this.color, 100, 1, 0, 'gravity2', { color: 'cyan', amount: 30 })
                        }
                        if (this.y > canvas.width / 2 && this.dy > -2) this.dy -= kontra.randInt(0.02, 0.04)
                    }
                }   
            })
            let turret2Barrel = kontra.Sprite({
                width: 150,height:25,color: 'cyan',
                x:0,y:0,rotation: 0,anchor:center,
                update() {
                    this.x = turret2.x
                    this.y = turret2.y
                    angle = kontra.angleToTarget(this, player) + kontra.degToRad(90)
                    if (this.rotation !== angle) {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? .1 : -.1;
                        this.rotation += kontra.degToRad(theta)
                    }
                },
                render() {
                    this.context.fillStyle = 'cyan'
                    this.context.beginPath()
                    this.context.rect(-this.width/2,0,this.width,this.height)
                    this.context.fill()
                }
            })*/
            let turret1Barrel = kontra.Sprite({
                width: 100, height: 25, color: boss5Color,
                x: 0, y: 0, rotation: kontra.degToRad(0), anchor: center,
                dt: 50, opacity: 0.3,
                update() {
                    this.dt += 1 / 20
                    if (this.dt > .25 && boss.phase == 'turrets' && this.y > 0) {
                        this.dt = 0

                        finalBossLaser(this.x + this.width / 2,
                            this.y + this.height / 2,
                            this.rotation - kontra.degToRad(180) - kontra.degToRad(kontra.randInt(-5, 5)),
                            50, 5, boss5Color, 60, {
                            damage: 2,
                            speed: 20,
                            piercesLeft: 1,
                        }, {}, boss)
                    }
                    this.x = turret1.x
                    this.y = turret1.y
                    angle = kontra.angleToTarget(this, player) + kontra.degToRad(90)
                    if (this.rotation !== angle) {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? .3 : -.3;
                        this.rotation += kontra.degToRad(theta)
                    }
                },
                render() {
                    this.context.fillStyle = boss5Color
                    this.context.beginPath()
                    this.context.globalAlpha = 1
                    this.context.fillRect(-this.width / 2, 0, this.width, this.height)
                    this.context.globalAlpha = .1
                    this.context.fillRect(-(this.width * 10) / 2, (this.height / 2) / 2, this.width * 10, this.height / 2)
                    this.context.closePath()
                    this.context.fill()
                }
            })
            camera.add(boss, turret1, turret1Barrel)
            enemies.push(boss)
            return {
                boss: boss,
            }
        }
        function createStaticWall(x, y, w = 20, h = 20,color = 'transparent') {
            let tile = kontra.Sprite({
                x: x, y: y, anchor: center,
                width: w, height: h, color: color,
                update() {
                    if (kontra.collides(this, player)) {
                        player.rotation += 0.8
                        player.x -= player.cos
                        player.y -= player.sin
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = color
                    this.context.fillRect(0, 0, w, h)
                    this.context.fill()
                }
            })
            camera.add(tile); staticTiles.push(tile)
        }
        function createEnemy(x, y, w = 10, h = 10, color = 'red',stats = {
                faction: {
                    wantedTarget: player,
                    targetedArr: allies,
                    alliedArr: enemies,
                },
                weapons: {
                    damage: 3,
                    range: 1,
                    attackSpeed: 1 / 500,
                    atkSpeedDT: 0,
                },
                base: {
                    health: 5,
                    maxHealth: 5,
                    defense: 0 + globalEnemy.defenseMult,
                    regen: 0,
                    perRegen: 1,
                    regenInterval: 1 / 1000,
                    speed: 2 + globalEnemy.speedMult,
                    rotationSpeed: 1,
                    trigger: true,
                    rewards: {
                        xp: 0,
                        cur: 1,
                    }
                }, abilities: {

                }
            }
        ) {
            let enemy = kontra.Sprite({
                x: x, y: y, width: w, height: h, ttl: Infinity, phase: '',
                rotation: 0, anchor: center, initialHealth: stats.base.health, ign: 0,pois:0,
                color: color, stats: stats, poisoned: false, ignited: false, update() {
                    angle = kontra.angleToTarget(this, help.closest({ x: this.x, y: this.y }, allies))
                    if (this.rotation !== angle) {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? this.stats.base.rotationSpeed : -this.stats.base.rotationSpeed;
                        this.rotation += kontra.degToRad(theta)
                        this.x += Math.cos(this.rotation - kontra.degToRad(90)) * stats.base.speed
                        this.y += Math.sin(this.rotation - kontra.degToRad(90)) * stats.base.speed
                    }
                    if (this.stats.base.trigger && kontra.getStoreItem('enemyTrails')) {
                        if (!boss5Killed && !boss5Spawned) {
                            createIntense(this.x, this.y, 0, 0, this.width - this.width / 3, this.height - this.height / 3, this.color, 100, 1, this.rotation, '', {}, {}, {
                                active: true,
                                amount: .6
                            })
                        }
                        if (!boss5Killed && boss5Spawned) {
                            createIntense(this.x, this.y - this.height / 2, Math.cos(this.rotation - kontra.degToRad(270)), Math.sin(this.rotation - kontra.degToRad(270)), this.width - this.width / 3, this.height - this.height / 3, this.color, 100, 1, this.rotation, '', {}, {}, {
                                active: true,
                                amount: .4
                            })
                        }
                    }
                    if (this.poisoned) {
                        this.pois += player.stats.primary.poison.interval
                        if (this.pois > 0.25) {
                            this.stats.base.health -= player.stats.primary.poison.damage
                            this.pois = 0
                            if (kontra.getStoreItem('fireFX'))createIntense(this.x,this.y,0,0,this.width,this.height,'green',100,1,this.rotation,'expanding')
                        }
                        enemyDead(this)
                    }
                    if (this.ignited) {
                        this.ign += 1 / player.stats.primary.ignite.interval
                        if (this.ign > 0.25) {
                            this.stats.base.health -= player.stats.primary.ignite.damage
                            this.ign = 0
                            //x, y, dx = 0, dy = 2, w = 30, h = 10, color = 'red', ttl = 300, opacity = 1, rotation = 0, 
                            if (kontra.getStoreItem('fireFX'))createIntense(this.x+kontra.randInt(this.width/2,-this.width/2), this.y+kontra.randInt(this.height/2,-this.height/2), Math.cos(kontra.randInt(this.rotation - 40,this.rotation + 40)), Math.sin(kontra.randInt(this.rotation - 40,this.rotation + 40)), this.width/2, this.height/2, 'coral', kontra.randInt(100, 200), 1, this.rotation,'gravity2')
                            if (kontra.getStoreItem('fireFX'))createIntense(this.x+kontra.randInt(this.width/2,-this.width/2), this.y+kontra.randInt(this.height/2,-this.height/2), Math.cos(kontra.randInt(this.rotation - 40,this.rotation + 40)), Math.sin(kontra.randInt(this.rotation - 40,this.rotation + 40)), this.width/3, this.height/3, 'orange', kontra.randInt(200,300), 1, this.rotation,'gravity2')
                        }
                        enemyDead(this)
                    }
                    this.stats.weapons.atkSpeedDT += this.stats.weapons.attackSpeed
                    this.stats.base.regen += this.stats.base.regenInterval
                    if (this.stats.base.regen > 0.25) {
                        this.stats.base.health += this.stats.base.perRegen
                        this.stats.base.regen = 0
                    }
                    if (kontra.collides(this, player)) {
                        this.x -= Math.cos(this.rotation - kontra.degToRad(90)) * 4
                        this.x -= Math.cos(this.rotation - kontra.degToRad(90)) * 4
                        this.rotation += 1
                        if (this.stats.weapons.atkSpeedDT > 0.25) {
                            this.stats.weapons.atkSpeedDT = 0
                            healthBar.opacity += 3
                            
                            //if (player.class == 'hullbreaker'){
                                
                                this.stats.base.health -= player.stats.primary.damage / 2
                                    if (kontra.keyPressed('shift')){
                                        this.stats.base.health -= player.stats.primary.damage
                                        //createFadingText(this.x, this.y, '-' + player.stats.primary.damage, 2, '16px Arial','red')
                                    }
                                    else {
                                        //createFadingText(this.x, this.y, '-' + player.stats.primary.damage / 2, 2, '16px Arial','#afa')
                                    }
                            //}
                            enemyDead(this)
                            player.stats.base.health -= this.stats.weapons.damage
        
                        }
                    }
                    if (!boss5Killed && boss5Spawned) {
                        this.y -= 3.5
                        if (this.y < 0) this.ttl = 0
                    }
                    this.advance()
                    if (this.dx > 0) this.dx += this.dx / 10
                    if (this.dx < 0) this.dx -= this.dx / 10
                    if (this.dy > 0) this.dy += this.dy / 10
                    if (this.dy < 0) this.dy -= this.dy / 10
                    if (this.dx > 4 || this.dx < -4) this.dx = 0
                    if (this.dy > 4 || this.dy < -4) this.dy = 0
                    if (!boss5Spawned && !boss5Killed) this.y -= windAmount
                },
                render() {
                    this.context.beginPath()
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 25
                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                    this.context.fillStyle = this.color
                    this.context.fillRect(0,0,this.width,this.height)
                    this.context.fill()
                    this.context.closePath()
                    
                    this.context.beginPath()
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 50
                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                    this.context.fillStyle = this.color
                    this.context.fillRect(0,0,this.width,this.height)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            enemies.push(enemy)
            camera.add(enemy)
        }
        function createEnemySpawner(
            x, y, spawnDelay = 1 / 250,
            w = 20, h = 20, color = 'red',
            enem = {
                x: kontra.randInt(x - w / 2, x + w / 2),
                y: kontra.randInt(y - h / 2, y + w / 2),
                width: 10,
                height: 10,
                color: 'red',
                stats: {
                    faction: {
                        wantedTarget: player,
                        targetedArr: allies,
                        alliedArr: enemies,
                    }, weapons: {
                        damage: 1,
                        range: 1,
                        attackSpeed: 1 / 500,
                        atkSpeedDT: 0,
                    }, base: {
                        health: 2,
                        maxHealth: 2,
                        defense: 0 + globalEnemy.defenseMult,
                        healingSpeed: 0,
                        speed: 1 + globalEnemy.speedMult,
                        rotationSpeed: .8,
                        trigger: true,
                        rewards: {
                            xp: 0,
                            gold: 0,
                        }
                    },
                }
            }
        ) {
            let spawner = kontra.Sprite({
                x: x, y: y, width: w, height: h,
                anchor: center, color: color, ttl: Infinity,
                dt: 0, opacity: 0, update() {
                    this.dt += spawnDelay
                    if (this.opacity < 1) this.opacity += 0.05
                    if (this.dt > 0.25 && spawning) {
                        this.dt = 0
                        createEnemy(
                            kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            enem.width,
                            enem.height,
                            enem.color,
                            {
                                faction: enem.stats.faction,
                                weapons: enem.stats.weapons,
                                base: {
                                    health: enem.stats.base.health,
                                    maxHealth: enem.stats.base.maxHealth,
                                    defense: enem.stats.base.defense,
                                    healingSpeed: enem.stats.base.healingSpeed,
                                    speed: enem.stats.base.speed + kontra.randInt(-.03, 0),
                                    rotationSpeed: enem.stats.base.rotationSpeed,
                                    trigger: enem.stats.base.trigger,
                                    rewards: {
                                        cur: enem.stats.base.rewards.cur,
                                    }
                                },
                            },
                        )
                        //createEnemy(this.x,this.y)
                    }
                }, render() {
                    this.context.beginPath()
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 25
                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                    this.context.fillStyle = this.color
                    this.context.fillRect(0, 0, this.width, this.height)
                    this.context.closePath()
                    
                    if (kontra.getStoreItem('post')) {
                        this.context.beginPath()
                        this.context.shadowBlur = 50
                        this.context.shadowColor = this.color
                        this.context.fillStyle = this.color
                        this.context.fillRect(0, 0, this.width, this.height)
                        this.context.closePath()
                    
                        this.context.beginPath()
                        this.context.shadowBlur = 80
                        this.context.shadowColor = this.color
                        this.context.fillStyle = this.color
                        this.context.fillRect(0, 0, this.width, this.height)
                        this.context.closePath()
                    
                        this.context.beginPath()
                        this.context.shadowBlur = 110
                        this.context.shadowColor = this.color
                        this.context.fillStyle = this.color
                        this.context.fillRect(0, 0, this.width, this.height)
                        this.context.closePath()
                    }
                }
            })
            camera.add(spawner)
            activeTiles.push(spawner)
            spawners.push(spawner)
        }
        function createStaticText(x, y, text, fontT = '32px fixed-width', textColor = 'white') {
            let txt = kontra.Text({
                x: x, y: y,
                anchor: center,
                render() {
                    this.context.fillStyle = textColor
                    this.context.font = fontT
                    this.context.beginPath()
                    this.context.fillText(text, 0, 0)

                }
            })
            camera.add(txt)
        }
        function createArrayText(x, y,textArr = ['a', 'b', 'c'],fontT = '32px fixed-width', sustain = 5, textColor = 'white',loop = true) {
            let txt = kontra.Text({
                x: x, y: y, anchor: center,
                textIndex: 0,
                dt: 0, render() {
                    this.dt += 1 / sustain / 100
                    if (this.dt > 0.25) {
                        this.dt = 0
                        this.textIndex += 1
                        if (this.textIndex >= textArr.length) {
                            if (loop) this.textIndex = 0
                            else this.opacity = 0
                        }
                    }
                    this.context.fillStyle = textColor
                    this.context.font = fontT
                    this.context.textAlign = 'center'
                    this.context.beginPath()
                    this.context.fillText(textArr[this.textIndex], 0, 0)
                }
            }); camera.add(txt)
        }
        function createFadingText(x, y, text, sustain = 4,fontT = '16px Arial', textColor = 'white', dy = 0) {
            let txt = kontra.Text({
                x: x, y: y, opacity: 0, dy: dy,
                anchor: center, ttl: sustain * 100,
                render() {
                    this.advance()
                    this.ttl -= 1
                    let refinedSustain = sustain * 100
                    if (this.ttl > refinedSustain - 35 && this.opacity <= 1) this.opacity += 0.1
                    if (this.ttl < 20) this.opacity -= 0.1
                    this.context.beginPath()
                    this.context.font = fontT
                    this.context.fillStyle = textColor
                    this.context.textAlign = 'center'
                    this.context.fillText(text, 0, 0)
                }
            })
            camera.add(txt)
        }
        function createTeleporter(x, y, w = 40, h = 40,dest = { x: canvas.width / 2, y: canvas.height / 2 },color = 'cyan', camT = true, camDest = dest,spinSpeed = 0.1) {
            let tele = kontra.Sprite({
                x: x,
                y: y,
                anchor: center,
                dest: dest,
                camT: camT,
                camDest: camDest,
                width: w,
                height: h,
                color: color,
                dt: 0,
                inside: kontra.Sprite({
                    width: w / 2,
                    height: h / 2,
                    x: w / 2,
                    y: h / 2,
                    //opacity: tele.opacity,
                    anchor: center,
                    render() {
                        this.context.fillStyle = color
                        this.context.beginPath()
                        this.context.globalAlpha = 0.7
                        this.context.rect(0, 0, this.width, this.height)
                        this.context.fill()
                        this.rotation += spinSpeed
                    }
                }),
                render() {
                    this.context.globalAlpha = 0.5
                    this.context.fillStyle = this.color
                    this.context.beginPath()
                    this.context.rect(0, 0, this.width, this.height)
                    this.context.fill()
                    this.context.closePath()
                    this.inside.render()
                    this.rotation -= spinSpeed / 2
                    this.dt += 1 / 25
                    if (this.dt > 0.25) {
                        this.dt = 0
                        createIntense(this.x, this.y, kontra.randInt(-1.5, 1.5), kontra.randInt(-1.5, 1.5), 4, 4, this.color, 100 + this.width)
                        createIntense(this.x, this.y, kontra.randInt(-1, 1), kontra.randInt(-1, 1), 3, 3, this.color, 50 + this.width, kontra.randInt(0.3, 0.6))
                        createIntense(this.x, this.y, kontra.randInt(-1, 1), kontra.randInt(-1, 1), 3, 3, this.color, 50 + this.width, kontra.randInt(0.3, 0.6))
                    }
                },
                onTeleport: function () {

                },
                teleport: function (teleporter) {
                    if (teleporter == 'story') {
                        spawning = true
                    }
                },

            })
            camera.add(tele)
            staticTiles.push(tele)
        }
        function shootLaser(x, y, rotation, w = 15, h = 3,color = 'cyan', ttl = player.stats.primary.range,stats = {
                damage: player.stats.primary.damage,
                speed: player.stats.primary.projSpeed,
                piercesLeft: player.stats.primary.pierces,
            }, homing = {
                active: false,
                rotationSpeed: 1,
                target: null
            }, trail = null,//function
        ) {
            let bullet = kontra.Sprite({
                x: x, y: y, color: color, stats: stats,
                width: w, height: h, ttl: ttl,
                anchor: center, rotation: rotation,
                opacity: 0, update() {
                    if (trail != null) trail(this)
                    if (this.ttl > ttl - 20) if (this.opacity < 1) this.opacity += 0.1
                    this.ttl -= 1
                    this.x += Math.cos(this.rotation) * this.stats.speed
                    this.y += Math.sin(this.rotation) * this.stats.speed
                    if (this.ttl < 20) this.opacity -= 0.05
                    if (homing.active) {
                        angle = kontra.angleToTarget(this, homing.target) - kontra.degToRad(90)
                        //if (this.ttl <= 90) angle = kontra.angleToTarget(this,{x:this.x,y:-250})
                        if (this.rotation !== angle) {
                            delta = angle - this.rotation
                            if (delta > PI) delta -= TAU;
                            if (delta < -PI) delta += TAU;
                            theta = delta > 0 ? homing.rotationSpeed : -homing.rotationSpeed;
                            this.rotation += kontra.degToRad(theta)
                        }
                    }
                }
            });
            camera.add(bullet)
            bullets.push(bullet)
        }
        // new class idea the rocketeer, shoots homing rockets that do aoe damage
        function shootRocket(x,y,target,rotation,stats={base: {damage: 15,speed: 3,rotationSpeed: 2}}) {
            let rocket = kontra.Sprite({
                x: x,y: y,targ: target,width:20,height:5,color:player.color,rotation:rotation,anchor:center,
                update() {
                    this.advance()
                    this.targ = help.closest({ x: this.x, y: this.y }, enemies)
                    angle = kontra.angleToTarget(this, this.targ) - kontra.degToRad(90)
                    if (this.rotation !== angle) {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? stats.base.rotationSpeed : -stats.base.rotationSpeed;
                        this.rotation += kontra.degToRad(theta)
                    }
                    this.x += Math.cos(this.rotation) * stats.base.speed
                    this.y += Math.sin(this.rotation) * stats.base.speed
                    if (kontra.collides(this,this.targ)) {
                        mineExplosion(this.x,this.y)
                    }
                }
            })
            camera.add(rocket)
            bullets.push(rocket)
        }
        function finalBossLaser(
            x, y, rotation, w = 15, h = 3,
            color = 'red', ttl = 100,
            stats = {
                damage: 1,
                speed: 3,
                piercesLeft: 1,
            }, homing = {
                active: false,
                rotationSpeed: 1,
            }, boss
        ) {
            let bullet = kontra.Sprite({
                x: x, y: y, color: color, stats: stats,
                width: w, height: h, ttl: ttl,
                anchor: center, rotation: rotation,
                opacity: 0, update() {
                    if (this.ttl > ttl - 20) if (this.opacity < 1) this.opacity += 0.1
                    this.ttl -= 1
                    this.x += Math.cos(this.rotation) * this.stats.speed
                    this.y += Math.sin(this.rotation) * this.stats.speed
                    if (this.ttl < 20) this.opacity -= 0.05
                    if (kontra.collides(this, player)) {
                        this.ttl = 0
                        healthBar.opacity = 2
                        player.stats.base.health -= this.stats.damage
                    }
                    if (kontra.collides(this, boss)) {
                        this.ttl = 0
                        boss.stats.base.health -= 5
                        enemyDead(boss)
                    }
                    if (homing.active) {
                        angle = kontra.angleToTarget(this, player)
                        if (this.ttl <= 90) angle = kontra.angleToTarget(this, { x: this.x, y: -250 })
                        if (this.rotation !== angle) {
                            delta = angle - this.rotation
                            if (delta > PI) delta -= TAU;
                            if (delta < -PI) delta += TAU;
                            theta = delta > 0 ? homing.rotationSpeed : -homing.rotationSpeed;
                            this.rotation += kontra.degToRad(theta)
                            this.x += Math.cos(this.rotation - kontra.degToRad(90)) * stats.speed
                            this.y += Math.sin(this.rotation - kontra.degToRad(90)) * stats.speed
                        }
                    }
                    if (!boss5Killed && boss5Spawned) this.y -= 3.5
                }
            });
            camera.add(bullet)
            enemyBullets.push(bullet)
        }
        function enemyLaser(x, y, rotation, w = 15, h = 3,color = 'red', ttl = 100,stats = {
                damage: 1,
                speed: 3,
                piercesLeft: 1,
            }, homing = {
                active: false,
                rotationSpeed: 1,
            }
        ) {
            let bullet = kontra.Sprite({
                x: x, y: y, color: color, stats: stats,
                width: w, height: h, ttl: ttl,
                anchor: center, rotation: rotation,
                opacity: 0, update() {
                    if (this.ttl > ttl - 20) if (this.opacity < 1) this.opacity += 0.1
                    this.ttl -= 1
                    this.x += Math.cos(this.rotation) * this.stats.speed
                    this.y += Math.sin(this.rotation) * this.stats.speed
                    if (this.ttl < 20) this.opacity -= 0.05
                    if (kontra.collides(this, player)) {
                        this.ttl = 0
                        healthBar.opacity = 2
                        player.stats.base.health -= this.stats.damage
                    }
                    if (homing.active) {
                        angle = kontra.angleToTarget(this, player)
                        if (this.ttl <= 90) angle = kontra.angleToTarget(this, { x: this.x, y: -250 })
                        if (this.rotation !== angle) {
                            delta = angle - this.rotation
                            if (delta > PI) delta -= TAU;
                            if (delta < -PI) delta += TAU;
                            theta = delta > 0 ? homing.rotationSpeed : -homing.rotationSpeed;
                            this.rotation += kontra.degToRad(theta)
                            this.x += Math.cos(this.rotation - kontra.degToRad(90)) * stats.speed
                            this.y += Math.sin(this.rotation - kontra.degToRad(90)) * stats.speed
                        }
                    }
                    if (!boss5Killed && boss5Spawned) this.y -= 3.5
                }
            });
            camera.add(bullet)
            enemyBullets.push(bullet)
        }
        function createTurret(
            x, y, r = 8, stats = {
                base: {
                    health: 20,
                    maxHealth: 20,
                    damage: turretStats.damage,
                    spread: turretStats.spread,
                    attackSpeed: turretStats.attackSpeed,
                }
        }) {
            activeTurrets += 1
            let turret = kontra.Sprite({
                x: x, y: y, radius: r, dt: 0, stats: stats, type: 'turret', class: turretClasses[kontra.randInt(0, turretClasses.length - 1)],
                width: r, height: r, render() {
                    this.context.beginPath()
                    this.context.fillStyle = this.color
                    //this.context.arc(0, 0, this.radius, 0, Math.PI * 2)
                    if (this.class != 'bullet-hell') this.context.rect(-5 / 2, -15, 5, 15)
                    if (this.class == 'bullet-hell') {
                        this.context.rect(-5 / 2, -20 / 2, 5, 20)
                        this.context.rect(-20 / 2, -5 / 2, 20, 5)
                    }
                    this.context.fill()
                    this.context.closePath()
                },
                update() {
                    this.ttl -= 1
                    if (this.class == 'fortress') this.color = 'blue'
                    if (this.class == 'flamethrower') this.color = 'coral'
                    if (this.class == 'minigunner') this.color = '#bfaaff'
                    if (this.class == 'sniper') this.color = '#afa'
                    if (this.class == 'bullet-hell') this.color = 'red'
                    if (this.class == 'dual-gunner') this.color = 'yellow'
                    if (this.class == 'default') this.color = 'gray'
                    if (enemies.length != 0) angle = kontra.angleToTarget(this, help.closest({ x: this.x, y: this.y }, enemies))
                    else angle = 0
                    if (this.class == 'flamethrower') this.dt += 1 / (this.stats.base.attackSpeed / 3)
                    else if (this.class == 'minigunner' || this.class == 'bullet-hell') {
                        this.dt += 1 / (this.stats.base.attackSpeed / 3)
                    }
                    else if (this.class == 'sniper') {
                        this.dt += 1 / (this.stats.base.attackSpeed * 4)
                    }
                    else if (this.class == 'fortress') {
                        this.dt += 1 / (this.stats.base.attackSpeed * 2)
                    }
                    else this.dt += 1 / this.stats.base.attackSpeed
                    if (this.dt > 0.25) {
                        this.dt = 0;
                        if (this.class == 'flamethrower') {
                            shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-this.stats.base.spread, this.stats.base.spread)), 3, 3, this.color, 60, {
                                damage: this.stats.base.damage / 2,
                                speed: turretStats.projSpeed,
                                piercesLeft: 1,
                            },{
                                active: false,
                                rotationSpeed: 0,
                                target: null,
                            },
                            )
                        }
                        else if (this.class == 'sniper') {
                            shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90), 30, 10, this.color, 120, {
                                damage: this.stats.base.damage * 2,
                                speed: turretStats.projSpeed * 2,
                                piercesLeft: 1,
                            })
                        }
                        else if (this.class == 'bullet-hell') {
                            shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90), 7, 5, this.color, 70, {
                                damage: this.stats.base.damage,
                                speed: 3,
                                piercesLeft: 1,
                            })
                            shootLaser(this.x, this.y, this.rotation + kontra.degToRad(90), 7, 5, this.color, 70, {
                                damage: this.stats.base.damage,
                                speed: 3,
                                piercesLeft: 1,
                            })
                            shootLaser(this.x, this.y, this.rotation, 7, 5, this.color, 70, {
                                damage: this.stats.base.damage,
                                speed: 3,
                                piercesLeft: 1,
                            })
                            shootLaser(this.x, this.y, this.rotation + kontra.degToRad(180), 7, 5, this.color, 70, {
                                damage: this.stats.base.damage,
                                speed: 3,
                                piercesLeft: 1,
                            })
                        }
                        else {
                            shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-this.stats.base.spread, this.stats.base.spread)), 15, 3, this.color, 80, {
                                damage: this.stats.base.damage,
                                speed: turretStats.projSpeed,
                                piercesLeft: 1,
                            })
                        }
                    }
                    if (enemies.length != 0) {
                        if (currentTargeting == null) angle = kontra.angleToTarget(this, help.closest({ x: this.x, y: this.y }, enemies))
                        if (currentTargeting != null) angle = kontra.angleToTarget(this, currentTargeting)
                        
                    }
                    if (this.rotation !== angle && this.class != 'bullet-hell') {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? turretStats.rotationSpeed : -turretStats.rotationSpeed;
                        this.rotation += kontra.degToRad(theta)
                    }
                    if (this.class == 'bullet-hell') this.rotation += .1
                }
            })
            let turretBase = kontra.Sprite({
                x: x, y: y, anchor: center, render() {
                    this.context.fillStyle = turret.color
                    this.context.beginPath()
                    this.context.rect(-5, -5, 10, 10)
                    this.context.closePath()
                    this.context.fill()
                    if (turret.ttl <= 0) {
                        this.ttl = 0

                    }
                }
            })
            if (turret.class == 'dual-gunner') {
                let turret2 = kontra.Sprite({
                    x: x, y: y, dt: 0, color: turret.color, anchor: center, render() {
                        this.context.fillStyle = turret.color
                        this.context.beginPath()
                        this.context.rect(-5 / 2, -15, 5, 15)
                        this.context.closePath()
                        this.context.fill()
                        this.dt += 1 / 40
                        if (this.dt > 0.25) {
                            this.dt = 0
                            shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-5, 5)), 10, 3, turret.color, 100, {
                                damage: 4,
                                speed: turretStats.projSpeed,
                                piercesLeft: 1,
                            })
                        }
                        if (enemies.length != 0) angle = kontra.angleToTarget(this, enemies[kontra.randInt(0, enemies.length - 1)])
                        if (this.rotation !== angle) {
                            delta = angle - this.rotation
                            if (delta > PI) delta -= TAU;
                            if (delta < -PI) delta += TAU;
                            theta = delta > 0 ? turretStats.rotationSpeed : -turretStats.rotationSpeed;
                            this.rotation += kontra.degToRad(theta)
                        }
                        if (turret.ttl <= 0) {
                            this.ttl = 0
                        }
                    }
                })
                camera.add(turret2)
            }
            camera.add(turret, turretBase)
            turrets.push(turret)
            allyDrones.push(turret)
            allies.push(turret)
        }
        let storyTeleporter = { x: 125, y: 100 }
        createTeleporter(125, 100, 80, 80, {
            x: canvas.width * 2, y: canvas.height / 2
        }, 'cyan', true, { x: canvas.width * 2, y: canvas.height / 2 })
        function createImpulse(x, y, radius, damage = 15) {
            let imp = kontra.Sprite({
                x: x, y: y, anchor: center, width: 0, height: 0, phase: 'growing', opacity: 0,type:'impulse',
                stats: {
                    damage: player.stats.abilities.impulse.damage,
                    cooldown: true,
                    push: true
                },
                update() {
                    this.width += radius / 10
                    this.height += radius / 10
                    if (this.opacity < 1 && this.phase == 'growing') this.opacity += 0.2
                    if (this.opacity >= 1 && this.phase == 'growing') { this.phase = 'shrinking' }
                    if (this.opacity > 0 && this.phase == 'shrinking') this.opacity -= 0.1
                    if (this.opacity <= 0 && this.phase == 'shrinking') this.ttl = 0
                },
                render() {
                    this.context.beginPath()
                    this.context.strokeStyle = player.color
                    this.context.lineWidth = 6
                    this.context.arc(this.width / 2, this.height / 2, this.width / 2, 0, Math.PI * 2)
                    //this.context.arc(this.width/2,this.height/2,this.width/3,0,Math.PI*2)
                    this.context.stroke()
                    this.context.closePath()
                }
            })
            bullets.push(imp)
            camera.add(imp)
        }
        function mineExplosion(x,y,color=player.color,size=mineStats.range,ignite=mineStats.ignite,shockwave=mineStats.shockwave) {
            let explosion = kontra.Sprite({
                x: x, y: y,radius: size / 3,color: color,opacity: .5,anchor:center,type:'impulse',
                width: size / 3,height: size/3,ttl: size, stats: {
                    push: 1,
                    damage: .3,
                },
                render() {
                    this.context.beginPath()
                    this.context.fillStyle = color
                    //this.context.strokeStyle = 'white'
                    //this.context.lineWidth = 10
                    this.context.arc(this.width/2,this.height/2,this.width/2,0,Math.PI*2)
                    this.context.fill()
                    //this.context.stroke()
                    this.context.closePath()
                },
                update() {
                    this.x += kontra.randInt(-.1,.1)
                    this.y += kontra.randInt(-.1,.1)
                    if (this.width > size) {
                        this.opacity -= .05
                        this.width -= size / 12.5
                        this.height -= size / 12.5
                    }
                    this.width += size / 25
                    this.height += size / 25
                    if (this.opacity <= .05) {
                        camera.remove(this)
                        this.ttl = 0
                    }
                }
            })
            bullets.push(explosion)
            camera.add(explosion)
        }
        let player = kontra.Sprite({
            x: canvas.width / 2, dx: 0, dy: 0, y: canvas.height / 2, speedR: 0, bulletHellRotation: 0, barrels: 1,
            width: 15, height: 20, color: 'cyan', anchor: center, type: 'player', cos: null, sin: null, createDroneDT: false, createDrone: 0,
            createTurretB: false, createTurretDT: 0, class: 'normal', stats: playerStats(),rocketDT: 0,
            render() {
                if (this.class != 'bullet-hell') {
                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 50
                    this.context.fillStyle = this.color;
                    this.context.beginPath();
                    //this.context.lineWidth = 2
                    this.context.moveTo(0, 0);
                    this.context.lineTo(this.width, 0);
                    this.context.lineTo(this.width / 2, this.height);
                    this.context.lineTo(0, 0);
                    this.context.fill();
                    this.context.closePath()
                }
                if (this.class == 'bullet-hell') {
                    this.context.fillStyle = this.color;
                    this.context.beginPath();
                    if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = 25
                    this.context.rect(0, 0, 10, 10)
                    this.context.fill();
                    this.context.closePath()
                }
            },
            update() {
                this.advance()
                this.rocketDT += 1/250
              //shootRocket(x,y,target,rotation,stats={base: {damage: 15,speed: 3,rotationSpeed: 2}})
                if (devMode)if (kontra.keyPressed('1')) {
                  if (devMode)this.rocketDT += 1/60
                  if (this.rocketDT > 0.25) {
                    shootRocket(this.x,this.y,help.closest({x:this.x,y:this.y},enemies))
                    this.rocketDT = 0
                  }
                }
                if (this.createDroneDT) this.createDrone += 1 / 600
                if (this.createTurretB) this.createTurretDT += 1 / 500
                if (this.createDrone > 0.25 && this.createDroneDT) {
                    if (this.createDroneDT) this.createDrone = 0
                    if (this.createDroneDT) {
                        new createAllyPlayer(this.x, this.y)
                        builtConstructs += 1
                        kontra.setStoreItem('builtConstructs',builtConstructs)
                    }
                }
                if (this.createTurretDT > 0.25 && this.createTurretB && kontra.keyPressed('space')) {
                    if (this.createTurretB) this.createTurretDT = 0
                    if (this.createTurretB) {
                        createTurret(player.x + kontra.randInt(-10, 10), player.y + kontra.randInt(-10, 10), 4, { base: { health: 20, maxHealth: 20, damage: turretStats.damage, spread: turretStats.spread, attackSpeed: turretStats.attackSpeed } })
                        builtConstructs += 1
                        kontra.setStoreItem('builtConstructs', builtConstructs)
                    }
                }
                if (this.rocketDT > 0.25) {
                    this.rocketDT = 0
                    if (kontra.keyPressed('f'))shootRocket(this.x,this.y,help.closest({ x: this.x, y: this.y }, enemies),this.rotation)
                }
                if (kontra.keyPressed('k')) {
                    currency++
                    kontra.setStoreItem('currency',currency)
                }
                if (kontra.keyPressed('l')) {
                    currency = 0
                }
                if (activeDrones < maxDrones && activeDrones != maxDrones) this.createDroneDT = true
                if (activeDrones >= maxDrones) this.createDroneDT = false
                if (activeTurrets < maxTurrets && activeTurrets != maxTurrets) this.createTurretB = true
                if (activeTurrets >= maxTurrets) this.createTurretB = false
                if (this.stats.deployables.turret.unlocked) this.stats.deployables.turret.deployDT += this.stats.deployables.turret.deployInterval
                if (this.stats.abilities.impulse.active) this.stats.abilities.impulse.dt += 1 / this.stats.abilities.impulse.cooldown
                if (this.stats.deployables.turret.deployDT > 0.25) { this.stats.deployables.turret.deployDT = 0; createTurret(this.x, this.y, 4) }
                if (this.stats.abilities.impulse.dt > 0.25 && kontra.keyPressed(this.stats.abilities.impulse.key)) {
                    this.stats.abilities.impulse.dt = 0;
                    createImpulse(this.x, this.y, this.stats.abilities.impulse.radius, 0)
                }
                this.stats.deployables.mine.deployDT += 1/50
                if (kontra.keyPressed('c') && this.stats.deployables.mine.deployDT > 0.25) {//&& this.stats.abilities.mine.unlocked
                    this.stats.deployables.mine.deployDT = 0
                    createMine(this.x,this.y)
                }
                if (!boss5Spawned && !boss5Killed) this.stats.primary.atkSpeedDT += 1 / this.stats.primary.attackSpeed
                if (this.stats.primary.atkSpeedDT >= 0.25) {
                    this.stats.primary.atkSpeedDT = 0
                    bulletsShot += 1
                    kontra.setStoreItem('bulletsShot',bulletsShot)
                    if (this.class != 'bullet-hell') {
                        //x, y, rotation, w = 15, h = 3,color = 'cyan', ttl = player.stats.primary.range,stats
                        if (this.stats.primary.projAmount >= 1) shootLaser(this.x, this.y, kontra.angleToTarget(this, { x: this.x + this.cos, y: this.y + this.sin }) - kontra.degToRad(kontra.randInt(-this.stats.primary.spread, this.stats.primary.spread)), 15, 3, this.color,
                            this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: player.stats.primary.homing.active, rotationSpeed: player.stats.primary.homing.rotationSpeed, target: help.closest({x:this.x,y:this.y},enemies)},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .1
                                })
                            })
                        if (this.stats.primary.projAmount >= 2) shootLaser(this.x, this.y, kontra.angleToTarget(this, { x: this.x - this.cos, y: this.y - this.sin }) - kontra.degToRad(kontra.randInt(-this.stats.primary.spread, this.stats.primary.spread)), 15, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: false, rotationSpeed: 1, target: help.closest({x:this.x,y:this.y},enemies)},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .1
                                })
                            })
                        if (this.stats.primary.projAmount >= 3) shootLaser(this.x, this.y, this.rotation + kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-this.stats.primary.spread, this.stats.primary.spread)), 15, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: player.stats.primary.homing.active, rotationSpeed: player.stats.primary.homing.rotationSpeed, target: help.closest({x:this.x,y:this.y},enemies)},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .1
                                })
                            })
                        if (this.stats.primary.projAmount >= 4) shootLaser(this.x, this.y, this.rotation - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-this.stats.primary.spread, this.stats.primary.spread)), 15, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: player.stats.primary.homing.active, rotationSpeed: player.stats.primary.homing.rotationSpeed, target: help.closest({x:this.x,y:this.y},enemies)},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .1
                                })
                            })
                        if (this.stats.primary.autoturret) shootLaser(this.x, this.y, kontra.angleToTarget(this, help.closest(this, enemies)) - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-this.stats.primary.spread, this.stats.primary.spread)), 15, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: player.stats.primary.homing.active, rotationSpeed: player.stats.primary.homing.rotationSpeed, target: help.closest({x:this.x,y:this.y},enemies)},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .1
                                })
                            })
                    }
                    else {
                        shootLaser(this.x, this.y, playerBarrels.rotation, 10, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: false, rotationSpeed: 1, target: null},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .3
                                })
                            })
                        if (this.barrels >= 4) shootLaser(this.x, this.y, playerBarrels.rotation - kontra.degToRad(90), 10, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: false, rotationSpeed: 1, target: null},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .3
                                })
                            })
                        if (this.barrels >= 3) shootLaser(this.x, this.y, playerBarrels.rotation + kontra.degToRad(90), 10, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: false, rotationSpeed: 1, target: null},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .3
                                })
                            })
                        if (this.barrels >= 2) shootLaser(this.x, this.y, playerBarrels.rotation - kontra.degToRad(180), 10, 3, this.color, this.stats.primary.range, { damage: player.stats.primary.damage, speed: player.stats.primary.projSpeed, piercesLeft: player.stats.primary.pierces }, {
                            active: false, rotationSpeed: 1, target: null},function (obj) {
                                if (kontra.getStoreItem('bulletTrails'))createIntense(obj.x, obj.y, 0, 0, obj.width / 2, obj.height / 2, obj.color, obj.ttl, 1, obj.rotation, '', {
                                    color: obj.color,
                                    amount: 40,
                                }, {}, {
                                    active: true,
                                    amount: .3
                                })
                            })
                    }
                }
                if (this.stats.primary.attackSpeed <= 0) this.stats.primary.attackSpeed = 1
                if (this.stats.base.health < this.stats.base.maxHealth) this.stats.base.regen += 1 / this.stats.base.regenInterval
                if (this.stats.base.regen > 0.25) {
                    this.stats.base.regen = 0
                    this.stats.base.health += this.stats.base.perRegen
                    createFadingText(this.x, this.y, '+' + this.stats.base.perRegen, 0.8, 'bold 16px Arial', 'lime', -2)
                }
                this.cos = Math.cos(this.rotation + kontra.degToRad(90))
                this.sin = Math.sin(this.rotation + kontra.degToRad(90))
                if (kontra.keyPressed("a") || kontra.keyPressed('arrowleft')) this.rotation -= 0.05
                if (kontra.keyPressed("d") || kontra.keyPressed('arrowright')) this.rotation += 0.05
                if (kontra.keyPressed("w") || kontra.keyPressed('arrowup')) {
                    this.x += this.cos * 2
                    this.y += this.sin * 2
                    if (kontra.keyPressed("shift")) {
                        this.x += this.cos * 2
                        this.y += this.sin * 2
                        if (this.class != 'bullet-hell' && boss5Killed && boss5Spawned && windAmount == 0 || !boss5Killed && !boss5Spawned && windAmount == 0 && this.class != 'bullet-hell') if (kontra.getStoreItem('allyTrails') == true)createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), 0, 0, 7, 7, this.color, 150, 1, this.rotation - kontra.degToRad(90), '', {
                            color: this.color,
                            amount: 80,
                        }, {}, {
                            active: true,
                            amount: .1
                        })
                    }
                    if (boss5Killed && boss5Spawned && windAmount == 0 || !boss5Killed && !boss5Spawned && windAmount == 0) {
                        if (kontra.getStoreItem('allyTrails'))createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), 0, 0, 7, 7, this.color, 150, 1, this.rotation - kontra.degToRad(90), '', {
                            color: this.color,
                            amount: 100,
                        }, {}, {
                            active: true,
                            amount: .2
                        })
                        // createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), 0, 0, 4, 4, this.color, 120, .8, this.rotation-kontra.degToRad(90),'',{
                        //     color: this.color,
                        //     amount: 25
                        // },{},{
                        //     active: true,
                        //     amount: .1
                        // })
                        // createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), 0, 0, 1, 1, this.color, 175, 1, this.rotation-kontra.degToRad(90),'',{
                        //     color: this.color,
                        //     amount: 25
                        // })
                    }
                    let angle = kontra.angleToTarget(this, { x: this.x, y: 0 })
                    if (!boss5Killed && boss5Spawned || windAmount != 0) {
                        if (kontra.getStoreItem('allyTrails') == true)createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), this.cos, kontra.randInt(-5, -6), 7, 7, this.color, 75, 1, angle, 'gravity2')
                        if (kontra.getStoreItem('allyTrails') == true)createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), this.cos, kontra.randInt(-5, -6), 5, 5, this.color, 100, 1, angle, 'gravity2')
                        if (kontra.getStoreItem('allyTrails') == true)createIntense(this.x - this.width / 2 * Math.cos(this.rotation + kontra.degToRad(90)), this.y - this.width / 2 * Math.sin(this.rotation + kontra.degToRad(90)), this.cos, kontra.randInt(-5, -6), 2, 2, this.color, 125, 1, angle, 'gravity2')
                    }
                }
            }
        })
        let healthBar = kontra.Sprite({
            x: 0, y: 0, update() { this.x = player.x; this.y = player.y },
            color: 'white', anchor: center, render() {
                this.context.beginPath()
                this.context.lineWidth = 4
                if (kontra.getStoreItem('post'))this.context.shadowBlur = 40
                if (kontra.getStoreItem('post'))this.context.shadowColor = this.color
                this.context.strokeStyle = this.color
                this.context.rect(-player.stats.base.maxHealth / 2, 20, player.stats.base.maxHealth, 10)
                this.context.stroke()
                this.context.closePath()
                this.context.fillStyle = this.color
                this.context.beginPath()
                this.context.lineWidth = 4
                if (kontra.getStoreItem('post'))this.context.shadowBlur = 40
                this.context.rect(-player.stats.base.maxHealth / 2, 20, player.stats.base.health / 40 * player.stats.base.maxHealth, 10)
                this.context.fill()
                this.context.closePath()
                if (this.opacity > 0) this.opacity -= 0.1
                if (this.opacity < 0) this.opacity = 0
                if (player.stats.base.health < 10 && this.color != 'red') this.color = 'red'
                if (this.color == 'red' && player.stats.base.health > 10) this.color = 'white'
            }
        })
        let playerBarrels = kontra.Sprite({
            anchor: center, x: 0, y: 0, rotation: 0,
            render() {
                if (player.class == 'bullet-hell') {
                    if (player.barrels == 1) {
                        this.context.fillStyle = 'red'
                        this.context.beginPath();
                        this.context.rect(0, -2.5, 10, 5)
                        this.context.fill();
                        this.context.closePath()
                    }
                    if (player.barrels == 2) {
                        this.context.fillStyle = 'red'
                        this.context.beginPath();
                        this.context.rect(-10, -2.5, 20, 5)
                        this.context.fill();
                        this.context.closePath()
                    }
                    if (player.barrels == 3) {
                        this.context.fillStyle = 'red'
                        this.context.beginPath();
                        this.context.rect(-10, -2.5, 20, 5)
                        this.context.rect(-2.5, 0, 5, 10)
                        this.context.fill();
                        this.context.closePath()
                    }
                    if (player.barrels == 4) {
                        this.context.fillStyle = 'red'
                        this.context.beginPath();
                        this.context.rect(-10, -2.5, 20, 5)
                        this.context.rect(-2.5, -10, 5, 20)
                        this.context.fill();
                        this.context.closePath()
                    }
                }
            },
            update() {
                this.rotation += .05
                this.x = player.x
                this.y = player.y
            }
        })
        let currencyDisplay = kontra.Text({
            text: currency,
            //font: '16px Arial',
            color: 'white',
            x: canvas.width*2,
            y: canvas.height - 50,
            anchor: center,
            textAlign: 'center',
            update() {
                this.text = help.abbrNum(Math.round(currency),2) + 'c'
            }
        })
        camera.add(player, healthBar, playerBarrels,currencyDisplay)
        //setTimeout(() => {
            //createBoss()
        //},5000)
        allies.push(player)
        function createAllyPlayer(
            x, y, w = 10, h = 10, color = 'cyan', stats = {
                base: {
                    health: 40,
                    maxHealth: 40,
                    perRegen: 2,
                    regenInterval: 400,
                    regen: 0,
                    defense: 0,
                    speedMult: 2,
                    widthRange: 75, // the range where it stops and focuses enemy
                    runRange: 50, // range where it runs away
                    rotationSpeed: 1,
                },
                primary: {
                    damage: 3,
                    attackSpeed: 100,
                    atkSpeedDT: 0,
                    range: 50,
                    projSpeed: 5,
                    projAmount: 1,
                    spread: 0.1,
                    pierces: 1,
                    autoturret: false,
                    explosion: {
                        knockback: 0.6,
                        radius: 0,
                        initialDamage: 5,
                        radialDiffusion: 0.03,
                        ignite: false,
                    }, poison: {
                        active: false,
                        damage: 4,
                        interval: 1 / 100,
                        pois: 0,
                    },
                },
                secondary: {
                    damage: 1,
                    attackSpeed: 1 / 5,
                    range: 20,
                    projSpeed: 2,
                    spread: 0.4,
                    pierces: 1,
                    autoturret: true,
                    ignite: {
                        damage: 3,
                        interval: 1 / 150,
                        ign: 0,
                    }
                },
                deployables: {
                    mine: {
                        unlocked: false,
                        deployDT: 0,
                        deployInterval: 1 / 500
                    },
                    turret: {
                        unlocked: false,
                        deployDT: 0,
                        deployInterval: 1 / 1000,
                    },
                    healer: {
                        unlocked: false,
                        deployDT: 0,
                    }
                },
                other: {
                    trailBurns: false,
                    savingGrace: false,
                }
            }
        ) {
            let pa = kontra.Sprite({
                x: x,
                y: y,
                width: w, height: h, color: color,
                anchor: center, type: 'drone',
                cos: null, sin: null, mode: droneModes[kontra.randInt(0, droneModes.length - 1)],
                class: droneClasses[kontra.randInt(0, droneClasses.length - 1)],
                stats: stats, target: player,
                render() {
                    // this.context.fillStyle = this.color;
                    // this.context.beginPath();
                    // this.context.moveTo(0, 0);
                    // this.context.lineTo(-this.width, 0);
                    // this.context.lineTo(-this.width / 2, -this.height);
                    // this.context.fill();
                    // this.context.closePath()

                    this.context.fillStyle = this.color
                    this.context.beginPath();
                    if (this.class != 'hullbreaker')this.context.arc(w / 2, h / 2, this.width / 2, 0, Math.PI * 2)
                    else {
                        this.context.moveTo(0, 0);
                        this.context.lineTo(this.width, 0);
                        this.context.lineTo(this.width / 2, this.height);
                        this.context.lineTo(0, 0);
                    }
                    this.context.fill();
                    this.context.closePath()

                    /*this.context.fillStyle = 'cyan';
                    this.context.beginPath();
                    this.context.moveTo(0, this.height/2);
                    this.context.lineTo(this.width, 0);
                    this.context.lineTo(this.width / 2, this.height);
                    this.context.fill();
                    this.context.closePath()
                    this.context.fillStyle = 'cyan';
                    this.context.beginPath();
                    //this.context.moveTo(this.width/2,this.height)
                    this.context.moveTo(0, this.height/2);
                    this.context.lineTo(-this.width/2, 0);
                    this.context.lineTo(-this.width / 2, this.height);
                    this.context.fill();
                    this.context.closePath()*/

                },
                update() {
                    this.advance()
                    if (this.class == 'default') this.color = 'lightblue'
                    if (this.class == 'minigunner') this.color = '#bfaaff'
                    if (this.class == 'flamethrower') this.color = 'coral'
                    if (this.class == 'bullet-hell') this.color = 'red'
                    if (this.class == 'hullbreaker') this.color = '#afa'
                    if (this.class == 'hullbreaker' && this.stats.base.widthRange != 0) {
                        this.stats.base.widthRange = 0
                        this.stats.base.runRange = 0
                        this.mode == 'offense'
                        this.stats.base.rotationSpeed = 2
                    }
                    if (this.class == 'flamethrower' && this.mode == 'clingy' || this.class == 'bullet-hell' && this.mode == 'clingy') this.mode = 'offense'
                    if (enemies.length != 0) {
                        if (this.mode == 'defense') {
                            targ = help.closest({ x: player.x, y: player.y }, enemies)
                            this.target = help.closest({ x: player.x, y: player.y }, enemies)
                        }
                        else if (this.mode == 'clingy') {
                            targ = help.closest({ x: player.x, y: player.y }, enemies)
                            this.target = player
                        }
                        else if (this.mode == 'offense') {
                            targ = help.closest({ x: this.x, y: this.y }, enemies)
                            this.target = help.closest({ x: this.x, y: this.y }, enemies)
                        }
                        else targ = help.closest({ x: player.x, y: player.y }, enemies)
                        if (this.class == 'hullbreaker') {
                            if (kontra.collides(this,help.closest({ x: this.x, y: this.y }, enemies))) {
                                help.closest({ x: this.x, y: this.y }, enemies).stats.base.health -= 5
                                enemyDead(help.closest({ x: this.x, y: this.y }, enemies))
                            }
                            if (this.y < 0)this.y += 10
                            if (this.y > canvas.height)this.y -= 10
                            if (this.x < canvas.width*2-canvas.width/2)this.x += 10
                            if (this.x > canvas.width*2+canvas.width/2)this.x -= 10
                            if (currentTargeting != null) {
                                this.targ = currentTargeting
                                this.target = currentTargeting
                            }
                        }
                    }
                    else {
                        targ = player
                        this.target = player
                    }
                    if (!boss5Killed && boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, -3.5, 5, 5, this.color, 100, 1)
                    if (!boss5Killed && boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, -3.5, 4, 4, this.color, 125, 1)
                    if (!boss5Killed && boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, -3.5, 3, 3, this.color, 150, 1)
                    if (!boss5Killed && !boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, 0, 5, 5, this.color, 100, 1)
                    if (!boss5Killed && !boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, 0, 4, 4, this.color, 125, 1)
                    if (!boss5Killed && !boss5Spawned) if (kontra.getStoreItem('allyTrails'))createIntense(this.x, this.y, 0, 0, 3, 3, this.color, 150, 1)
                    if (this.stats.primary.atkSpeedDT < 0.25) {
                        if (this.class == 'minigunner') this.stats.primary.atkSpeedDT += 1 / (this.stats.primary.attackSpeed / 3)
                        else if (this.class == 'flamethrower' || this.class == 'bullet-hell') this.stats.primary.atkSpeedDT += 2 / (this.stats.primary.attackSpeed / 8)
                        else if (this.class == 'sniper') this.stats.primary.atkSpeedDT += 1 / (this.stats.primary.attackSpeed * 4)
                        else this.stats.primary.atkSpeedDT += 1 / this.stats.primary.attackSpeed
                    }
                    if (this.stats.primary.atkSpeedDT > 0.25) {
                        this.stats.primary.atkSpeedDT = 0
                        //for (let i = 0; i < this.stats.primary.projAmount; i++) {
                        if (this.class == 'minigunner') {
                            shootLaser(this.x, this.y, kontra.angleToTarget(this, targ) - kontra.degToRad(90) + kontra.degToRad(kontra.randInt(-15, 15)), 10, 3, this.color, this.stats.primary.range, {
                                damage: this.stats.primary.damage,
                                speed: 5,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 0.2,
                                target: targ
                            })
                        }
                        else if (this.class == 'bullet-hell') {
                            shootLaser(this.x, this.y, kontra.degToRad(kontra.randInt(-360, 360)), 10, 3, this.color, this.stats.primary.range, {
                                damage: this.stats.primary.damage,
                                speed: 4,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 0.7,
                                target: targ
                            })
                            shootLaser(this.x, this.y, kontra.degToRad(kontra.randInt(-360, 360)), 10, 3, this.color, this.stats.primary.range, {
                                damage: this.stats.primary.damage,
                                speed: 5,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 0.2,
                                target: targ
                            })
                        }
                        else if (this.class == 'flamethrower') {
                            shootLaser(this.x, this.y, kontra.angleToTarget(this, targ) - kontra.degToRad(90) - kontra.degToRad(kontra.randInt(-20, 20)), 5, 5, this.color, this.stats.primary.range, {
                                damage: 0.3,
                                speed: 4,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 0.1,
                                target: targ
                            })
                        }
                        else if (this.class == 'hullbreaker') {
                            
                        }
                        else {
                            shootLaser(this.x, this.y, kontra.angleToTarget(this, targ) - kontra.degToRad(90), 15, 3, this.color, this.stats.primary.range, {
                                damage: this.stats.primary.damage,
                                speed: 5,
                                piercesLeft: 1,
                            }, {
                                active: true,
                                rotationSpeed: 1,
                                target: targ
                            })
                        }

                        if (this.stats.primary.projAmount >= 2) {
                            // if (enemies.length != 0) shootLaser(this.x, this.y, kontra.angleToTarget(this,help.closest({x:this.x,y:this.y},enemies))-kontra.degToRad(90))
                        }
                        if (this.stats.primary.projAmount >= 3) {
                            //if (enemies.length != 0) shootLaser(this.x, this.y, kontra.angleToTarget(this,enemies[kontra.randInt(0,enemies.length-1)])-kontra.degToRad(90))
                        }
                        //}
                    }
                    if (this.stats.base.health < this.stats.base.maxHealth) this.stats.base.regen += 1 / this.stats.base.regenInterval
                    if (this.stats.base.regen > 0.25) {
                        this.stats.base.regen = 0
                        //if (this.stats.base.health < this.stats.base.maxHealth) {
                        this.stats.base.health += this.stats.base.perRegen
                        createFadingText(this.x, this.y, '+' + this.stats.base.perRegen, 0.8, 'bold 16px Arial', 'lime', -2)

                        //}
                    }
                    this.cos = Math.cos(this.rotation - kontra.degToRad(90))
                    this.sin = Math.sin(this.rotation - kontra.degToRad(90))
                    angle = kontra.angleToTarget(this, this.target)
                    if (!Math.hypot(this.x - this.target.x, this.y - this.target.y) < this.stats.base.widthRange + this.target.width) {
                        this.x += this.cos
                        this.y += this.sin
                        if (this.class == 'hullbreaker') {
                            this.x += this.cos
                            this.y += this.sin
                        }
                    }
                    if (Math.hypot(this.x - this.target.x, this.y - this.target.y) < this.stats.base.widthRange + this.target.width) {
                        this.x -= this.cos
                        this.y -= this.sin
                        if (this.class == 'clingy') {
                            this.x += Math.cos(this.rotation)
                            this.y += Math.sin(this.rotation)
                        }
                    }
                    if (Math.hypot(this.x - this.target.x, this.y - this.target.y) < this.stats.base.runRange + this.target.width && this.mode != 'clingy') {
                        this.x -= this.cos - kontra.degToRad(90)
                        this.y -= this.sin - kontra.degToRad(90)
                    }
                    if (this.rotation !== angle) {
                        delta = angle - this.rotation
                        if (delta > PI) delta -= TAU;
                        if (delta < -PI) delta += TAU;
                        theta = delta > 0 ? this.stats.base.rotationSpeed : -this.stats.base.rotationSpeed;
                        this.rotation += kontra.degToRad(theta)
                        //this.x += this.cos
                        //this.y += this.sin
                    }
                }
            })
            camera.add(pa)
            allies.push(pa)
            allyDrones.push(pa)
            activeDrones += 1
            return pa
        }
        function createMine(x,y) {
            let mine = kontra.Sprite({
                x:x,y:y,width: 10,height: 10,color: player.color,anchor:center,type:'mine',
                update() {
                    let close = help.closest({ x: this.x, y: this.y }, enemies)
                    if (Math.hypot(close.x - this.x,close.y - this.y) < this.width + close.width) {
                        mineExplosion(this.x,this.y)
                        this.ttl = 0
                    }
                }
            })
            allies.push(mine)
            camera.add(mine)
        }
        function makeToggleButton(x, y, toggleVar, w = 40, h = 20, color = 'red', outline = 'darkred') {
            let button = kontra.Sprite({
                x: x, y: y, width: w, height: h, color: color, toggled: toggleVar,
                outline: outline, toggleVar: toggleVar, anchor: center, render() {
                    this.context.beginPath()
                    this.context.strokeStyle = this.outline
                    this.context.fillStyle = this.color
                    this.context.rect(0, 0, this.width, this.height)
                    this.context.closePath()
                    this.context.fill()
                    this.context.stroke()
                }, update() {
                    // if (this.toggled != this.toggleVar) this.toggled = this.toggleVar
                    if (kontra.collides(this, player)) {
                        if (this.toggled) {
                            this.toggled = true
                            this.color = 'lime'
                        }
                        else if (!this.toggled) {
                            this.toggled = false
                            this.color = 'red'
                        }
                    }
                }
            })
            camera.add(button)
        }
        function arenaUp(middle = {text: '',func: function () { }}, bottom={func: function () { }},topText = 'EQUIPMENT UPGRADE') {
            if (middle.func != null) midde.func()
            if (bottom.func != null) bottom.func()
            createFadingText(canvas.width * 2,canvas.height / 2,
                topText,6, '64px Arial');
            if (middle.text != 'null') {
                createFadingText(canvas.width * 2,canvas.height/2+60,
                    middle.text,6,'16px Arial')
            }
        }
        function checkForArenaUpdate(enemy) {
          neededEnemies = 5
          kontra.setStoreItem('currency',currency)
          if (arenaIndex >= 5) neededEnemies += 15//15
          if (devMode == false) {
            if (arenaIndex >= 10) neededEnemies += 20//20
            if (arenaIndex >= 15) neededEnemies += 20//20
            if (arenaIndex >= 20) neededEnemies += 20//20
            if (arenaIndex >= 25) neededEnemies += 20//20
            if (arenaIndex >= 50) neededEnemies += 20//20
            if (arenaIndex >= 75) neededEnemies += 20//20
            if (arenaIndex > 100) arenaIndex = 75//75
          }

            if (arenaIndex == 1) {
                arenaUp({
                    text: 'more enemies',
                    func: null
                },{
                    func: function() {
                        if (player.class == 'normal') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'more bullets.',
                        6, '32px Arial');
                    player.stats.primary.projAmount = 2
                }
                if (player.class == 'engi') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'regen speed.',
                        6, '32px Arial','orange');
                    player.stats.base.regenInterval -= 5
                }
                if (player.class == 'flamer') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'more bullets.',
                        6, '32px Arial','orange');
                    player.stats.primary.projAmount += 1
                }
                if (player.class == 'bullet-hell') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'another barrel.',
                        6, '32px Arial','orange');
                    player.barrels += 1
                }
                    }
                })
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 400, 10, canvas.height)
            }
            if (arenaIndex == 2) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                );
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more enemies, and increased enemy health',
                    6, '16px Arial'
                );
                if (player.class == 'normal') {
                    player.stats.primary.range += 25
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'more range',
                        6, '32px Arial');
                }
                if (player.class == 'engi') {
                    maxDrones += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max drones.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'bullet-hell') {
                    maxDrones += 1
                    player.stats.primary.attackSpeed -= 15
                    createFadingText(canvas.width*2,canvas.height/2+40,'max drones.',6,'32px Arial','orange')
                }
                //createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 400, 10, canvas.height)
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 450, 10, canvas.height)
            }
            if (arenaIndex == 3) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'enemy defense. think about it.',
                    6, '16px Arial');
                if (player.class == 'normal') {
                    player.stats.primary.attackSpeed -= 15
                    createFadingText(
                        canvas.width * 2, canvas.height / 2 + 40,
                        'more attack speed',
                        6, '32px Arial');
                }
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 460, canvas.width, 10)
                //createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 400, 10, canvas.height)
            }
            if (arenaIndex == 4) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new variant of enemy, slow, but tanky',
                    6, '16px Arial')
                if (player.class == 'normal') {
                    player.stats.primary.range += 15
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'increased range',
                        6, '32px Arial');
                }
                if (player.class == 'engi') {
                    maxTurrets += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max turrets.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'bullet-hell') {
                    player.stats.primary.damage += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'damage.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'minigun') {
                    player.stats.primary.attackSpeed -= 15
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'attack speed.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height - 100, 1 / 2000, 10, 125, '#bfaaff', normalTank(this))
            }
            if (arenaIndex == 5) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more tanks. thats it.',
                    6, '16px Arial')
                if (player.class == 'normal') {
                    player.stats.primary.attackSpeed -= 10
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'more firerate',
                        6, '32px Arial')
                }
                if (player.class == 'flamer') {
                    player.stats.primary.attackSpeed -= 25
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'firerate',
                        6, '32px Arial','orange')
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height - 100, 1 / 2200, 10, 125, '#bfaaff', normalTank(this))
            }
            if (arenaIndex == 6) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'even more tanks.',
                    6, '16px Arial')
                if (player.class == 'normal') {
                    player.stats.primary.damage += 2
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'more damage',
                        6, '32px Arial')
                }
                if (player.class == 'engi') {
                    maxDrones += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max drones.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'bullet-hell') {
                    player.stats.primary.attackSpeed -= 5
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'firerate.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'minigun') {
                    player.stats.primary.attackSpeed -= 15
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'attack speed.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, 100, 1 / 2400, 10, 125, '#bfaaff', normalTank(this))
            }
            if (arenaIndex == 7) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                ); createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'ability: press "e" to impulse, pushing enemies',
                    6, '32px Arial'
                );
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'the last of the tanks.',
                    6, '16px Arial'
                )
                player.stats.abilities.impulse.active = true
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, 100, 1 / 2600, 10, 125, '#bfaaff', normalTank(this))
            }
            if (arenaIndex == 8) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'a new enemy type, the healer.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'player max health',
                        6, '32px Arial'
                    );
                    player.stats.base.maxHealth += 10
                }
                if (player.class == 'engi') {
                    globalAllyDrone.damageMult += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'drone damage.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'hullbreaker') {
                    maxDrones
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'drones.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'bullet-hell') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'another barrel.',
                        6, '32px Arial','orange');
                    player.barrels += 1
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2 - 100, canvas.height, 1 / 1000, 125, 10, '#afa', normalHealer(this))
            }
            if (arenaIndex == 9) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'your trail now burns enemies.',
                    6, '32px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more healers',
                    6, '16px Arial')
                createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 100, canvas.height, 1 / 1200, 125, 10, '#afa', normalHealer(this))
            }
            if (arenaIndex == 10) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'more player regen speed.',
                    6, '32px Arial');
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'healer man+',
                    6, '16px Arial'
                )
                player.stats.base.perRegen += 2
                createEnemySpawner(canvas.width * 2 + canvas.width / 2 - 100, 0, 1 / 1400, 125, 10, '#afa', normalHealer(this))
            }
            if (arenaIndex == 11) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                );
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'the last of the healers.',
                    6, '16px Arial'
                );
                if (player.class == 'normal') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'increased damage.',
                        6, '32px Arial');
                    player.stats.primary.damage += 1
                }
                if (player.class == 'engi') {
                    maxTurrets += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max turrets.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'bullet-hell') {
                    player.stats.primary.attackSpeed -= 5
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'firerate.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'minigun') {
                    player.stats.primary.projAmount += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'attack speed.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'hullbreaker') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'regen speed.',
                        6, '32px Arial','orange');
                    player.stats.base.regenInterval -= 15
                }
                createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 100, 0, 1 / 1600, 125, 10, '#afa', normalHealer(this))
            }
            if (arenaIndex == 12) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new enemy type, the berserker, does massive damage.',
                    6, '16px Arial'
                )
                globalEnemy.healthMult += 10
                if (player.class != 'bullet-hell') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'your weapon now poisons enemies.',
                        6, '32px Arial')
                    player.stats.primary.poison.active = true
                }
                if (player.class == 'bullet-hell') {
                    maxTurrets += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'more max turrets. [space]', 6, '32px Arial', 'orange')
                }
                if (player.class == 'engi') {
                    player.stats.primary.attackSpeed -= 40
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'firerate.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'hullbreaker') {
                    maxDrones += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max drones.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, 250, 1 / 800, 10, 125, '#fff7aa', normalB(this))
            }
            if (arenaIndex == 13) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    '+poison interval.',
                    6, '32px Arial'
                )

                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more beserkers.',
                    6, '16px Arial'
                )

                player.stats.primary.poison.interval = 1 / 50
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, 250, 1 / 900, 10, 125, '#fff7aa', normalB(this)
                )
            }
            if (arenaIndex == 14) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more beserkers, and increased movement speed.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'one more projectile',
                        6, '32px Arial')
                    player.stats.primary.projAmount += 1
                }
                if (player.class == 'engi') {
                    maxDrones += 1
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'max drones.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'hullbreaker') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'regen speed.',
                        6, '32px Arial','orange');
                    player.stats.base.regenInterval -= 25
                }
                if (player.class == 'flamer') {
                    player.stats.primary.attackSpeed -= 25
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'firerate',
                        6, '32px Arial','orange')
                }
                if (player.class == 'bullet-hell') {
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40,
                        'another barrel.',
                        6, '32px Arial','orange');
                    player.barrels += 1
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height - 250, 1 / 1000, 10, 125, '#fff7aa', normalB(this)
                )
            }
            if (arenaIndex == 15) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'the last of the beserkers.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    player.stats.primary.attackSpeed -= 10
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'attack speed.',
                        6, '32px Arial')
                }
                if (player.class == 'hullbreaker') {
                    maxDrones
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'drones.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height - 250, 1 / 1100, 10, 125, '#fff7aa',
                    normalB(this)
                )
            }
            if (arenaIndex == 16) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'nothing.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    player.stats.primary.attackSpeed -= 5
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'even more firerate.',
                        6, '32px Arial'
                    )
                }
                if (player.class == 'engi') {
                    player.stats.primary.attackSpeed -= 25
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'firerate.',
                        6, '32px Arial', 'orange'
                    )
                }
            }
            
            if (arenaIndex == 17) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new miniboss type, super default.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'autoturret: fires at the nearest enemy',
                        6, '32px Arial'
                    )
                    player.stats.primary.autoturret = true
                }
                if (player.class == 'bullet-hell') {
                    player.stats.primary.attackSpeed -= 5
                    // after this, no more firerate
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'firerate.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'flamer') {
                    player.stats.primary.ignite.damage += 1
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'fire damage.',
                        6, '32px Arial','orange')
                }
                createEnemySpawner(canvas.width * 2, canvas.width / 2 - 40, 1 / 2000, 80, 80, 'red',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 20,
                        height: 20,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 10,
                                range: 2,
                                attackSpeed: 1 / 140,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 100,
                                maxHealth: 100,
                                defense: 20 + globalEnemy.defenseMult,
                                trigger: true,
                                speed: 1,
                                rotationSpeed: 2,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 18) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'you can now deploy a turret. [space]',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new miniboss, super tank.',
                    6, '16px Arial'
                )
                maxTurrets += 1
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.width / 2, 1 / 4000, 10, 20, 'purple',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 40,
                        height: 40,
                        color: 'purple',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 40,
                                range: 2,
                                attackSpeed: 1 / 100,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 2000,
                                maxHealth: 2000 + globalEnemy.healthMult,
                                defense: 20 + globalEnemy.defenseMult,
                                trigger: true,
                                speed: 0.3,
                                rotationSpeed: 0.3,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 19) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'turret damage.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new miniboss type, super healer.',
                    6, '16px Arial'
                )
                createEnemySpawner(canvas.width * 2, canvas.width, 1 / 4000, 20, 10, '#afa',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 50,
                        height: 50,
                        color: '#afa',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 40,
                                range: 2,
                                attackSpeed: 1 / 100,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 300,
                                maxHealth: 1000 + globalEnemy.healthMult,
                                defense: 20 + globalEnemy.defenseMult,
                                regen: 0,
                                trigger: true,
                                regenInterval: 1 / 1000,
                                perRegen: 100,
                                speed: 1,
                                rotationSpeed: 0.8,
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 20) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'max health, and health regen',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new miniboss type, super beserker.',
                    6, '16px Arial'
                )
                player.stats.base.perRegen += 2
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 4000, 10, 20, 'yellow',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 30,
                        height: 30,
                        color: 'yellow',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 200,
                                range: 2,
                                attackSpeed: 1 / 500,
                                atkSpeedDT: 0,
                            }, base: {
                                trigger: true,
                                health: 75,
                                maxHealth: 75,
                                defense: 20 + globalEnemy.defenseMult,
                                speed: 2.5,
                                rotationSpeed: 0.8,
                            },
                        }
                    }
                )

            }
            if (arenaIndex == 21) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'you now have an ally drone.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'new enemy type, speedster.',
                    6, '16px Arial'
                )
                maxDrones += 1
                createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 250, canvas.height, 1 / 35, 125, 10, 'skyblue', normalSpeed(this))
            }
            if (arenaIndex == 22) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more speedsters.',
                    6, '16px Arial'
                )
                if (player.class == 'normal') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'another projectile.',
                        6, '32px Arial'
                    )
                    player.stats.primary.projAmount += 1
                }
                if (player.class == 'engi') {
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'new turret class, bullethell.',
                        6, '32px Arial', 'orange'
                    )
                    turretClasses.push('bullet-hell')
                }
                if (player.class == 'bullet-hell') {
                    player.stats.primary.damage += 2
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'damage.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'minigun') {
                    player.stats.primary.damage += 3
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'damage.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 + canvas.width / 2 - 250, canvas.height, 1 / 35, 125, 10, 'skyblue', normalSpeed(this))
            }
            if (arenaIndex == 23) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'firerate.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more speedsters.',
                    6, '16px Arial'
                )
                player.stats.primary.attackSpeed -= 5
                createEnemySpawner(canvas.width * 2 + canvas.width / 2 - 250, 0, 1 / 35, 125, 10, 'skyblue', normalSpeed(this))
            }
            if (arenaIndex == 24) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'the end of the speedsters.',
                    6, '16px Arial'
                )
                if (player.class == 'minigun') {
                    player.stats.primary.damage += 3
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'damage.', 6, '32px Arial', 'orange')
                }
                if (player.class == 'normal') {
                    player.stats.primary.damage += 3
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'damage.', 6, '32px Arial')
                }
                if (player.class == 'flamer') {
                    maxDrones += 1
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'max drones.',
                        6, '32px Arial','orange')
                }
                if (player.class == 'engi') {
                    player.stats.primary.attackSpeed -= 40
                    createFadingText(canvas.width * 2, canvas.height / 2 + 40, 'firerate.', 6, '32px Arial', 'orange')
                }
                createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 250, 0, 1 / 35, 125, 10, 'skyblue', normalSpeed(this))
            }
            if (arenaIndex == 26) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'damage.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'the tanks are back.. with a vengance..',
                    6, '16px Arial'
                )
                player.stats.primary.damage += 2
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height - 100, 1 / 2500, 50, 125, '#bfaaff',tankTeir2(this))
            }
            if (arenaIndex == 27) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'primary damage.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more advanced tanks.',
                    6, '16px Arial'
                )
                player.stats.primary.damage += 2
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height - 100, 1 / 2800, 50, 125, '#bfaaff',tankTeir2(this))
            }
            if (arenaIndex == 28) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'turret range.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'even more advanced tanks.',
                    6, '16px Arial'
                )
                turretStats.ttl += 50
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, 100, 1 / 3000, 50, 125, '#bfaaff',tankTeir2(this))
            }
            if (arenaIndex == 29) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    '"EQUIPMENT" UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'primary weapon now has a chance to steal life.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'no more advanced tanks.',
                    6, '16px Arial'
                )
                player.stats.primary.lifesteal.active = true
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, 100, 1 / 3200, 50, 125, '#bfaaff',tankTeir2(this)
                )
            }
            
            if (arenaIndex == 30) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'you now have an ally drone.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'healers are now superbuffed..',
                    6, '16px Arial')
                maxDrones += 1
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height - 100, 1 / 2800, 50, 125, '#bfaaff',tankTeir2(this))
            }
            if (arenaIndex == 31) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'your weapons now set enemies on fire.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more superbuffed healers.',
                    6, '16px Arial')
                player.stats.primary.ignite.active = true
                player.stats.primary.ignite.active = createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 100, canvas.height, 1 / 1200, 125, 10, '#afa', healerTier2(this))

            }
            if (arenaIndex == 32) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'impulse rate of fire.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'more healers.',
                    6, '16px Arial')
                player.stats.abilities.impulse.cooldown -= 50
                createEnemySpawner(canvas.width * 2 + canvas.width / 2 - 100, 0, 1 / 1400, 125, 10, '#afa', healerTier2(this))
            }
            if (arenaIndex == 33) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'you can deploy another turret.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'last of the healers.',
                    6, '16px Arial')
                maxTurrets += 1
                createEnemySpawner(canvas.width * 2 - canvas.width / 2 + 100, 0, 1 / 1600, 125, 10, '#afa', healerTier2(this))
            }
            if (arenaIndex == 34) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'damage.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'uh oh superbuffed beserkers',
                    6, '16px Arial')
            }
            if (arenaIndex == 35) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'drone damage.',
                    6, '32px Arial')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'beserkers.',
                    6, '16px Arial')
            }

            if (arenaIndex == 51) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'EQUIPMENT UPGRADE',
                    6, '64px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'regen speed.',
                    6, '32px Arial'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'tanks are now omegabuffed..',
                    6, '16px Arial'
                )
                player.stats.primary.regenInterval -= 50
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height - 100, 1 / 600, 50, 125, '#bfaaff',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 15,
                        height: 15,
                        color: '#bfaaff',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 10,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                advanced: true,
                                trigger: true,
                                health: 300,
                                maxHealth: 300,
                                defense: 1 + globalEnemy.defenseMult,
                                regen: 0,
                                regenInterval: 1 / 5000,
                                perRegen: 1,
                                speed: 0.6,
                                rotationSpeed: 0.8,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 101) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'the winds are increasing..',
                    8, '32px Arial', 'white'
                )
                windAmount += 0.5
            }
            if (arenaIndex == 103) {
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'the winds are increasing..',
                    8, '32px Arial', 'white'
                )
                windAmount += 0.5
            }
            if (arenaIndex == 25 && !boss1Spawned && !boss1Killed) {
                boss1Spawned = true
                stopLoopingBoss1 = false
                if (kontra.getStoreItem('musicSetting'))boss1INTRO.play()
                playingMusic = true
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'BOSS TIME',
                    8, '64px Arial', 'white')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'just a normal boss',
                    8, '32px Arial', 'white')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 60,
                    'nothing to be afraid of',
                    8, '16px Arial', 'white')
                camera.remove(spawners)
                camera.remove(enemies)
                camera.remove(activeTiles)
                for (let i = 0; i < spawners.length; i++) spawners[i].ttl = 0
                for (let i = 0; i < activeTiles.length; i++) activeTiles[i].ttl = 0
                for (let i = 0; i < enemies.length; i++) enemies[i].ttl = 0
                createBoss()
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 70, 50, canvas.height, 'red', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 10,
                    height: 10,
                    color: 'red',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 2,
                            range: 1,
                            attackSpeed: 1 / 250,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 2,
                            maxHealth: 2 + globalEnemy.healthMult,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: false,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        }
                    }
                })
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 70, 50, canvas.height, 'red', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 10,
                    height: 10,
                    color: 'red',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 2,
                            range: 1,
                            attackSpeed: 1 / 250,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 2,
                            maxHealth: 2,
                            defense: 0 + globalEnemy.defenseMult,
                            trigger: false,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, 0, 1 / 70, canvas.width, 50, 'red', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 10,
                    height: 10,
                    color: 'red',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 2,
                            range: 1,
                            attackSpeed: 1 / 250,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 2,
                            maxHealth: 2,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: false,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 40, canvas.width, 50, 'red',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 4,
                                range: 1,
                                attackSpeed: 1 / 250,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 2,
                                maxHealth: 2,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,
                                trigger: false,
                                speed: 0.8,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 50 && !boss2Spawned && !boss2Killed) {
                insue2ND()
            }
            if (arenaIndex == 75 && !boss3Spawned && !boss3Killed) {
                boss3Spawned = true
                if (kontra.getStoreItem('musicSetting'))boss3INTRO.play()
                playingMusic = true
                stopLoopingBoss3 = false
                //canvas.classList.add('theFinale')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'HEALER BOSS',
                    8, 'bold 64px Arial', 'white'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'oh god',
                    8, 'bold 32px Arial', 'white'
                )
                camera.remove(spawners)
                camera.remove(activeTiles)
                createThirdBoss()
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, '#afa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 5,
                    height: 5,
                    color: '#afa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 6,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, '#afa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 5,
                    height: 5,
                    color: '#afa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 6,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            trigger: true,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, 0, 1 / 25, canvas.width, 50, '#afa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 5,
                    height: 5,
                    color: '#afa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 6,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 25, canvas.width, 50, '#afa',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 5,
                        height: 5,
                        color: '#afa',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 25,
                                maxHealth: 25,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,
                                trigger: false,
                                speed: 1.5,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 100 && !boss4Killed && !boss4Spawned) {
                //canvas.classList.add('theFinale')
                playingMusic = true
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'BERSERKER BOSS',
                    8, 'bold 64px Arial', 'white'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'very dangerous, the finale',
                    8, 'bold 32px Arial', 'white'
                )
                camera.remove(spawners)
                camera.remove(activeTiles)
                createFourthBoss()
                createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, '#fff7aa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 5,
                    height: 5,
                    color: '#fff7aa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 10,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 2,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, '#fff7aa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 10,
                    height: 10,
                    color: '#fff7aa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 10,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            trigger: true,
                            speed: 2,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, 0, 1 / 25, canvas.width, 50, '#fff7aa', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 10,
                    height: 10,
                    color: '#fff7aa',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 10,
                            range: 1,
                            attackSpeed: 1 / 200,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 25,
                            maxHealth: 25,
                            defense: 0 + globalEnemy.defenseMult,
                            healingSpeed: 0,
                            trigger: true,
                            speed: 1.5,
                            rotationSpeed: 1,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 25, canvas.width, 50, '#fff7aa',
                    {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: '#fff7aa',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 10,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 25,
                                maxHealth: 25,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,
                                trigger: false,
                                speed: 1.5,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    gold: 0,
                                }
                            },
                        }
                    }
                )
            }
            if (arenaIndex == 110 && !boss5Spawned && !boss5Killed) {
                boss5Spawned = true
                stopLoopingBoss5 = false
                if (kontra.getStoreItem('musicSetting'))boss5INTRO.play()
                currentTrack = boss5INTRO
                playingMusic = true
                //canvas.classList.add('theFinale')
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2,
                    'SPEEDY BOSS?',
                    8, 'bold 64px Arial', 'blue'
                )
                createFadingText(
                    canvas.width * 2,
                    canvas.height / 2 + 40,
                    'you are doomed',
                    8, 'bold 32px Arial', 'blue'
                )
                for (let i = 0; i < activeTiles.length; i++) {
                    activeTiles[i].ttl = 0
                }
                for (let i = 0; i < enemies.length; i++) {
                    enemies[i].ttl = 0
                }
                let a = new createFithBoss()
                createEnemySpawner(canvas.width * 2, canvas.height, 1 / 100, canvas.width, 1, 'transparent', {
                    x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                    y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                    width: 5,
                    height: 10,
                    color: 'cyan',
                    stats: {
                        faction: {
                            wantedTarget: player,
                            targetedArr: allies,
                            alliedArr: enemies,
                        }, weapons: {
                            damage: 2,
                            range: 1,
                            attackSpeed: 1 / 50,
                            atkSpeedDT: 0,
                        }, base: {
                            health: 5,
                            maxHealth: 5,
                            defense: 0 + globalEnemy.defenseMult,
                            regen: 0,
                            trigger: true,
                            speed: 3.5,
                            rotationSpeed: 0.2,
                            rewards: {
                                xp: 0,
                                gold: 0,
                            }
                        },
                    }
                })
            }
        }
        function enemyDead(enemy) {
            if (enemy.stats.base.health <= 0) {
                if (enemy.type != 'boss') {
                    kills += 1
                    if (arenaIndex > 30) currency -= 0.025
                    currency += 0.05
                    //if (enemy.color == '#bfaaff') currency += 0.1 // tank
                    //if (enemy.color == '#fff7aa') currency += 0.1 // beserker
                    
                    kontra.setStoreItem('currency',currency)
                    createIntense(enemy.x, enemy.y, enemy.dx, enemy.dy, enemy.width, enemy.height, enemy.color, 100, 1, enemy.rotation, '', {
                        color: enemy.color,
                        amount: 20
                    }, {}, {
                        active: true,
                        amount: .3
                    })
                    kontra.setStoreItem('kills', kills)
                    enemy.ttl = 0
                    enemy.stats.base.health = enemy.stats.base.maxHealth
                    //createIntense(enemy.x,enemy.y,kontra.randInt(-1,1),kontra.randInt(-1,1),5,5,enemy.color,200,1,0,'gravity')
                    //createIntense(enemy.x,enemy.y,kontra.randInt(-1,1),kontra.randInt(-1,1),5,5,enemy.color,200,1,0,'gravity')
                    //createIntense(enemy.x,enemy.y,kontra.randInt(-0.5,0.5),kontra.randInt(-0.5,0.5),3,3,enemy.color,175,1,0,'gravity')
                    neededEnemies -= 1
                    if (neededEnemies <= 0) {

                        //neededEnemies += arenaIndex * 25
                        neededEnemies = arenaIndex * 25
                        checkForArenaUpdate(enemy)
                        //|| !boss2Killed && !boss2Spawned || !boss3Killed && !boss3Spawned
                        if (!boss1Spawned && !boss1Killed ||
                            boss1Spawned && boss1Killed && !boss2Spawned ||
                            boss1Spawned && boss1Killed && boss2Spawned && boss2Killed && !boss3Spawned ||
                            boss1Spawned && boss1Killed && boss2Spawned && boss2Killed && boss3Spawned && boss3Killed && !boss4Spawned ||
                            boss1Spawned && boss1Killed && boss2Spawned && boss2Killed && boss3Spawned && boss3Killed && boss4Spawned && boss4Killed && !boss5Spawned
                        ) arenaIndex += 1

                    }
                }
                if (enemy.type == 'boss') {
                    for (let i = 0; i > cleanupHealthbars.length; i++) cleanupHealthbars[i].ttl = 0
                    createIntense(enemy.x, enemy.y, enemy.dx, enemy.dy, enemy.width, enemy.height, enemy.color, 100, 1, enemy.rotation, '', {
                        color: enemy.color,
                        amount: 20
                    }, {}, {
                        active: true,
                        amount: .3
                    })
                }
                if (enemy.type == 'boss' && boss1Spawned && !boss1Killed && enemy.boss == '1') {
                    currentTargeting = null
                    stopLoopingBoss1 = true
                    boss1Killed = true
                    playingMusic = false
                    enemy.ttl = 0
                    currency += 2.5
                    kontra.setStoreItem('currency',currency)
                    neededEnemies = arenaIndex * 25
                    camera.remove(cleanupHealthbars)
                    camera.remove(spawners)
                    camera.remove(activeTiles)
                    camera.remove(enemies)
                    for (let i = 0;i > enemies.length;i++) enemies[i].ttl = 0
                    for (let i = 0;i > spawners.length;i++) spawners[i].ttl = 0
                    for (let i = 0;i > activeTiles.length;i++) activeTiles[i] = 0
                    kontra.setStoreItem('boss1Defeated', true)
                    createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 90, 50, canvas.height, 'red', normalTeir2(this))
                    createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 90, 50, canvas.height, 'red', normalTeir2(this))
                    createEnemySpawner(canvas.width * 2, 0, 1 / 90, canvas.width, 50, 'red', normalTeir2(this))
                    createEnemySpawner(canvas.width * 2, canvas.height, 1 / 90, canvas.width, 50, 'red',normalTeir2(this))
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2,
                        'boss defeated',
                        8, 'bold 64px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'good job',
                        8, '32px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 60,
                        'now the enemies are 2x harder',
                        8, 'bold 16px Arial', 'red'
                    );
                    bossKills += 1
                    kontra.setStoreItem('bossKills', bossKills)
                }
                if (enemy.type == 'boss' && boss2Spawned && !boss2Killed && enemy.boss == '2') {
                    currentTargeting = null
                    boss2Killed = true
                    stopLoopingBoss2 = true
                    enemy.ttl = 0
                    playingMusic = false
                    neededEnemies = arenaIndex * 25
                    currency += 5
                    kontra.setStoreItem('currency',currency)
                    camera.remove(cleanupHealthbars)
                    camera.remove(spawners)
                    camera.remove(activeTiles)
                    camera.remove(enemies)
                    for (let i = 0;i > enemies.length;i++) enemies[i].ttl = 0
                    for (let i = 0;i > spawners.length;i++) spawners[i].ttl = 0
                    for (let i = 0;i > activeTiles.length;i++) activeTiles[i] = 0
                    kontra.setStoreItem('boss2Defeated', true)
                    createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 5,
                                maxHealth: 5,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,

                                speed: 0.5,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 1,
                                }
                            },
                        }
                    })
                    createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 5,
                                maxHealth: 5,
                                defense: 0 + globalEnemy.defenseMult,

                                speed: 0.5,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 1,
                                }
                            },
                        }
                    })
                    createEnemySpawner(canvas.width * 2, 0, 1 / 25, canvas.width, 50, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 8,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 5,
                                maxHealth: 5,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,

                                speed: 0.5,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 1,
                                }
                            },
                        }
                    })
                    createEnemySpawner(canvas.width * 2, canvas.height, 1 / 25, canvas.width, 50, 'red',
                        {
                            x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            width: 10,
                            height: 10,
                            color: 'red',
                            stats: {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 6,
                                    range: 1,
                                    attackSpeed: 1 / 175,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 5,
                                    maxHealth: 5,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 0.5,
                                    rotationSpeed: 1,
                                    rewards: {
                                        xp: 0,
                                        c: 1,
                                    }
                                },
                            }
                        }
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2,
                        'one more boss defeated',
                        8, 'bold 64px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'proud of you',
                        8, '32px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 60,
                        'now the enemies are 3x harder',
                        8, '16px Arial', 'red'
                    )
                    bossKills += 1
                    kontra.setStoreItem('bossKills', bossKills)
                }
                if (enemy.type == 'boss' && boss3Spawned && !boss3Killed && enemy.boss == '3') {
                    currentTargeting = null
                    boss3Killed = true
                    stopLoopingBoss3
                    enemy.ttl = 0
                    playingMusic = false
                    currency += 10
                    kontra.setStoreItem('currency',currency)
                    neededEnemies = arenaIndex * 25
                    camera.remove(cleanupHealthbars)
                    camera.remove(spawners)
                    camera.remove(activeTiles)
                    camera.remove(enemies)
                    for (let i = 0;i > enemies.length;i++) enemies[i].ttl = 0
                    for (let i = 0;i > spawners.length;i++) spawners[i].ttl = 0
                    for (let i = 0;i > activeTiles.length;i++) activeTiles[i] = 0
                    kontra.setStoreItem('boss3Defeated', true)
                    createEnemySpawner(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 25,
                                maxHealth: 25,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,

                                speed: 1,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 2,
                                }
                            },
                        }
                        
                    })
                    createEnemySpawner(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 1 / 25, 50, canvas.height, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 25,
                                maxHealth: 25,
                                // 10k lines heh
                                defense: 0 + globalEnemy.defenseMult,

                                speed: 1,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 2,
                                }
                            },
                        }
                    })
                    createEnemySpawner(canvas.width * 2, 0, 1 / 25, canvas.width, 50, 'red', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 10,
                        height: 10,
                        color: 'red',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 6,
                                range: 1,
                                attackSpeed: 1 / 200,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 25,
                                maxHealth: 25,
                                defense: 0 + globalEnemy.defenseMult,
                                healingSpeed: 0,

                                speed: 1,
                                rotationSpeed: 1,
                                rewards: {
                                    xp: 0,
                                    c: 2,
                                }
                            },
                        }
                    })
                    createEnemySpawner(canvas.width * 2, canvas.height, 1 / 25, canvas.width, 50, 'red',
                        {
                            x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                            y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                            width: 10,
                            height: 10,
                            color: 'red',
                            stats: {
                                faction: {
                                    wantedTarget: player,
                                    targetedArr: allies,
                                    alliedArr: enemies,
                                }, weapons: {
                                    damage: 6,
                                    range: 1,
                                    attackSpeed: 1 / 175,
                                    atkSpeedDT: 0,
                                }, base: {
                                    health: 25,
                                    maxHealth: 25,
                                    defense: 0 + globalEnemy.defenseMult,
                                    healingSpeed: 0,
                                    speed: 1,
                                    rotationSpeed: 1,
                                    rewards: {
                                        xp: 0,
                                        c: 2,
                                    }
                                },
                            }
                        }
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2,
                        'another?',
                        8, 'bold 64px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'very good.',
                        8, '32px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 60,
                        'now the enemies are 4x harder',
                        8, '16px Arial', 'red'
                    )
                    bossKills += 1
                    kontra.setStoreItem('bossKills', bossKills)
                }
                if (enemy.type == 'boss' && boss4Spawned && !boss4Killed && enemy.boss == '4') {
                    currentTargeting = null
                    boss4Killed = true
                    stopLoopingBoss4 = true
                    //boss5Spawned = true
                    enemy.ttl = 0
                    currency += 15
                    kontra.setStoreItem('currency',currency)
                    playingMusic = false
                    neededEnemies = arenaIndex * 5
                    camera.remove(spawners)
                    camera.remove(activeTiles)
                    camera.remove(enemies)
                    for (let i = 0;i > enemies.length;i++) enemies[i].ttl = 0
                    for (let i = 0;i > spawners.length;i++) spawners[i].ttl = 0
                    for (let i = 0;i > activeTiles.length;i++) activeTiles[i] = 0
                    kontra.setStoreItem('boss4Defeated', true)
                    createEnemySpawner(canvas.width * 2, canvas.height, 1 / 100, canvas.width, 1, 'transparent', {
                        x: kontra.randInt(this.x - this.width / 2, this.x + this.width / 2),
                        y: kontra.randInt(this.y - this.height / 2, this.y + this.height / 2),
                        width: 5,
                        height: 10,
                        color: 'cyan',
                        stats: {
                            faction: {
                                wantedTarget: player,
                                targetedArr: allies,
                                alliedArr: enemies,
                            }, weapons: {
                                damage: 2,
                                range: 1,
                                attackSpeed: 1 / 50,
                                atkSpeedDT: 0,
                            }, base: {
                                health: 5,
                                maxHealth: 5,
                                defense: 0 + globalEnemy.defenseMult,
                                regen: 0,
                                trigger: true,
                                speed: 3,
                                rotationSpeed: 0.2,
                                rewards: {
                                    xp: 0,
                                    c: 3,
                                }
                            },
                        }
                    })
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2,
                        'final boss defeated?',
                        8, 'bold 64px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'amazing.',
                        8, '32px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 60,
                        'uh..',
                        8, 'bold 16px Arial', 'red'
                    );
                    bossKills += 1
                    windAmount += 0.5
                    kontra.setStoreItem('bossKills', bossKills)
                }
                if (enemy.type == 'boss' && boss4Spawned && !boss4Killed && enemy.boss == '5') {
                    
                    boss5Killed = true
                    enemy.ttl = 0
                    beatenGames += 1
                    currency += 20
                    kontra.setStoreItem('currency',currency)
                    playingMusic = false
                    if (currentRunTurrets == 0) kontra.setStoreItem('beatGameWithoutTurrets',true)
                    neededEnemies = arenaIndex * 25
                    camera.remove(spawners)
                    camera.remove(activeTiles)
                    camera.remove(enemies)
                    for (let i = 0;i > enemies.length;i++) enemies[i].ttl = 0
                    kontra.setStoreItem('boss5Defeated', true)
                    kontra.setStoreItem('beatenGames',beatenGames)
                    kontra.setStoreItem('BeatGame')
                    if (player.class == 'sniper')kontra.setStoreItem('BeatGameAsSniper',true)
                    if (player.class == 'engi')kontra.setStoreItem('BeatGameAsEngi',true)
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2,
                        'you have completed the game',
                        8, 'bold 64px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 40,
                        'hope you had fun..',
                        8, '32px Arial'
                    )
                    createFadingText(
                        canvas.width * 2,
                        canvas.height / 2 + 60,
                        'oh, and you have unlocked endless mode. good luck',
                        8, 'bold 16px Arial', 'red'
                    );
                    bossKills += 1
                    kontra.setStoreItem('bossKills', bossKills)
                }
            }
        }
        function createIntense(
            x, y, dx = 0, dy = 2, w = 30, h = 10, 
            color = 'red', ttl = 300, opacity = 1, rotation = 0, 
            type = 'none', 
            glow = { color: null, amount: null }, 
            kill = { x: null, y: null }, 
            degen = { active: false, amount: 0.1, }
        ) {
            let intense = kontra.Sprite({
                x: x, y: y, width: w, height: h, anchor: center, rotation: rotation,
                dx: dx, dy: dy, color: color, ttl: ttl, opacity: opacity, update() {
                    this.ttl -= 1
                    this.advance()
                    if (this.ttl < 100) this.opacity -= 0.05
                    if (this.opacity <= 0) this.opacity = 0
                    if (type == 'gravity') this.dy += kontra.randInt(0.04, 0.08)
                    if (type == 'gravity2') this.dy -= kontra.randInt(0.04, 0.08)
                    if (type == 'expanding') {
                        this.width += 1
                        this.height += 1
                    }
                    if (degen.active == true) {
                        //this.opacity = 1
                        this.width -= degen.amount
                        this.height -= degen.amount
                        if (this.width < 0 || this.height < 0) this.ttl = 0
                    }
                    if (kill.x != null || kill.y != null) {
                        if (this.x >= kill.x) this.ttl = 0
                        if (this.y >= kill.y) this.ttl = 0
                    }
                }, render() {
                    this.context.beginPath()
                    this.context.fillStyle = color
                    if (kontra.getStoreItem('post'))this.context.shadowBlur = glow.amount
                    if (kontra.getStoreItem('post'))this.context.shadowColor = glow.color
                    this.context.rect(0, 0, this.width, this.height)
                    this.context.fill()
                    this.context.closePath()
                }
            })
            camera.add(intense)
            is.push(intense)
        }
        createStaticWall(canvas.width * 2 - canvas.width / 2, canvas.height / 2, 10, canvas.height)
        createStaticWall(canvas.width * 2 + canvas.width / 2, canvas.height / 2, 10, canvas.height)
        createStaticWall(canvas.width * 2, canvas.height, canvas.width, 10)
        createStaticWall(canvas.width * 2, 0, canvas.width, 10)
        //setTimeout(insue5TH,5000)
        createEnemySpawner(canvas.width * 2, 0, 1 / 400, canvas.width, 10)
        function resetToDefualt() {
            player.stats = playerStats()
            maxTurrets = 0
            maxDrones = 0
            playingMusic = false
            boss1Killed = false
            boss1Spawned = false
            boss2Killed = false
            boss2Spawned = false
            boss3Spawned = false
            boss3Killed = false
            boss4Killed = false
            boss4Spawned = false
            boss5Spawned = false
            boss5Killed = false
            stopLoopingBoss1 = true
            stopLoopingBoss2 = true
            stopLoopingBoss3 = true
            stopLoopingBoss4 = true
            stopLoopingBoss5 = true
            window.scrollTo(0, 0)
            for (let i = 0; i < spawners.length; i++) spawners[i].ttl = 0
            for (let i = 0; i < enemies.length; i++) enemies[i].ttl = 0
            for (let i = 0; i < bullets.length; i++) bullets[i].ttl = 0
            for (let i = 0; i < enemyBullets.length; i++) enemyBullets[i].ttl = 0
            for (let i = 0; i < turrets.length; i++) turrets[i].ttl = 0
            camera.remove(spawners)
            camera.remove(enemies)
            camera.remove(enemyBullets)
            camera.remove(turrets)
            globalEnemy = {
                defenseMult: 0,
                healthMult: 0,
                speedMult: 0
            }
            spawning = false
            player.width = 15
            player.height = 20
            player.class = 'normal'
            currentLook = { x: canvas.width / 2, y: canvas.height / 2 }
            maxTurrets = 0
            maxDrones = 0
            createEnemySpawner(canvas.width * 2, 0, 1 / 400, canvas.width, 10)
            //player.x = canvas.width / 2
            //player.y = canvas.height / 2
            neededEnemies = 25
        }
        function die() {
            currentScene = menuScene
            playingMusic = false
            boss1Killed = false
            boss1Spawned = false
            boss2Killed = false
            boss2Spawned = false
            boss3Spawned = false
            boss3Killed = false
            boss4Killed = false
            boss4Spawned = false
            boss5Spawned = false
            boss5Killed = false
            stopLoopingBoss1 = true
            stopLoopingBoss2 = true
            stopLoopingBoss3 = true
            stopLoopingBoss4 = true
            stopLoopingBoss5 = true
            window.scrollTo(0, 0)
            for (let i = 0; i < spawners.length; i++) spawners[i].ttl = 0
            for (let i = 0; i < enemies.length; i++) enemies[i].ttl = 0
            for (let i = 0; i < bullets.length; i++) bullets[i].ttl = 0
            for (let i = 0; i < enemyBullets.length; i++) enemyBullets[i].ttl = 0
            for (let i = 0; i < turrets.length; i++) turrets[i].ttl = 0
            camera.remove(spawners)
            camera.remove(enemies)
            camera.remove(enemyBullets)
            camera.remove(turrets)
            deaths += 1
            kontra.setStoreItem('deaths', deaths)
            globalEnemy = {
                defenseMult: 0,
                healthMult: 0,
                speedMult: 0
            }
            createFadingText(canvas.width / 2, canvas.height / 2, 'dying isnt fully supported. reload the page to get full.')
            spawning = false
            player.width = 15
            player.height = 20
            player.class = 'normal'
            player.stats = playerStats()
            currentLook = { x: canvas.width / 2, y: canvas.height / 2 }
            maxTurrets = 0
            maxDrones = 0
            createEnemySpawner(canvas.width * 2, 0, 1 / 400, canvas.width, 10)
            //player.x = canvas.width / 2
            //player.y = canvas.height / 2
            neededEnemies = 25
            restartMenuScene()
            currentScene = menuScene
            if (kontra.getStoreItem('soundsSetting') == null) dieSound.play()
        }
        canvas.addEventListener('click', event => currentScene.show())
        // the last 5 stages will be a singular speedster spawner at the bottom and each stage will increase the wind until the final boss
        let loop = kontra.GameLoop({
            blur: true,
            update: (dt) => {
                currentScene.update(dt)
                camera.lookAt(currentLook)
                scenes.map(sc => {
                    if (sc != currentScene && !sc.hidden) sc.hide()
                    if (sc == currentScene && sc.hidden) sc.show()
                })
                if (!hovering) canvas.style.cursor = 'auto'
                if (hovering && !overrideHover) canvas.style.cursor = 'pointer'
                if (overrideHover) canvas.style.cursor = 'text'
                if (boss1INTRO.ended && !boss1looping) {
                    loopBoss1()
                    boss1looping = true
                }
                if (boss2INTRO.ended && !boss2looping) {
                    loopBoss2()
                    boss2looping = true
                }
                if (boss5INTRO.ended && !boss5looping) {
                    loopBoss5()
                    boss5looping = true
                }
                if (INTRO.ended && !stopListenLoopingMusic) {
                    stopListenLoopingMusic = true
                    LOOP.play()
                }
                if (playingMusic) {
                    LOOP.pause()
                }
                // this is an absolute mess
                if (!boss5Killed && !boss5Spawned && windAmount == 0.5) {
                    player.y -= 0.5
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-4, -5), 1, 20, 'white', canvas.height, 0.2)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && !boss5Spawned && windAmount == 1) {
                    player.y -= 1
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-4, -5), 1, 20, 'white', canvas.height, 0.2)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && !boss5Spawned && windAmount == 1.5) {
                    player.y -= 1.5
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-5, -6), 1, 20, 'white', canvas.height, 0.2)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-5, -6), 2, 30, 'white', canvas.height, 0.3)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && !boss5Spawned && windAmount == 2) {
                    player.y -= 2
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-4, -5), 1, 20, 'white', canvas.height, 0.2)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-4, -5), 2, 30, 'white', canvas.height, 0.3)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && !boss5Spawned && windAmount == 2.5) {
                    player.y -= 2.5
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 1, 20, 'white', canvas.height, 0.2)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 2, 30, 'white', canvas.height, 0.3)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 2, 30, 'white', canvas.height, 0.4)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && !boss5Spawned && windAmount == 3) {
                    player.y -= 3
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 1, 20, 'white', canvas.height, 0.2)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 2, 30, 'white', canvas.height, 0.3)
                    createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-6, -7), 2, 30, 'white', canvas.height, 0.4)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (!boss5Killed && boss5Spawned) {
                    player.y -= 3.5
                    //createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-10, -11), 1, 25, 'cyan', canvas.height, 0.2)
                    //createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-10, -11), 2, 30, 'cyan', canvas.height, 0.3)
                    //createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-11, -12), 2, 30, 'cyan', canvas.height, 0.4)
                    //createIntense(kontra.randInt(canvas.width * 2 - canvas.width / 2, canvas.width * 2 + canvas.width / 2), canvas.height + 40, 0, kontra.randInt(-12, -13), 2, 50, 'cyan', canvas.height, 0.2)
                    if (player.y > canvas.height - 50) player.y -= 0.5
                    if (player.y <= 100) player.y += 0.5
                    if (player.y <= 0) die()
                }
                if (player.stats.base.health <= 0) die()
                
                if (currentScene == camera && enemies.length >= 1)bullets.map(bl => {
                    enemies.map(en => {
                        if (kontra.collides(en, bl)) {
                            if (bl.type != 'impulse')bl.ttl = 0
                            let decider = kontra.randInt(0, player.stats.primary.lifesteal.chance)
                            if (decider == 1 && player.stats.primary.lifesteal.active && en.stats.base.trigger) {
                                player.stats.base.health += player.stats.primary.lifesteal.heal
                                createIntense(player.x, player.y, kontra.randInt(-1, 1), -1, 5, 5, '#bfaaff', 200, 1, 0, 'gravity')
                                createIntense(player.x, player.y, kontra.randInt(-1, 1), -1, 5, 5, '#bfaaff', 200, 1, 0, 'gravity')
                                createIntense(player.x, player.y, kontra.randInt(-0.5, 0.5), -1, 2, 2, '#bfaaff', 175, 1, 0, 'gravity')
                            }
                            en.stats.base.health -= bl.stats.damage
                            if (bl.stats.push && en.type != 'boss') {
                                angle = kontra.angleToTarget(en, player) - kontra.degToRad(90)
                                if (en.dx > -3) en.dx -= Math.cos(angle)
                                if (en.dy > -3) en.dy -= Math.sin(angle)
                            }
                            if (player.stats.primary.poison.active && !en.poisoned) en.poisoned = true
                            if (player.stats.primary.ignite.active && !en.ignited) {
                                en.ignited = true
                                ignitedEnemies += 1
                                kontra.setStoreItem('ignitedEnemies',ignitedEnemies)
                            }
                            enemyDead(en)
                            
                        }
                    })
                })
                /*if (currentScene == camera && enemies.length >= 0) {
                    bullets.map(bullet => {
                        let enemy = help.closest({x: bullet.x,y: bullet.y},enemies) 
                        if (kontra.collides(enemy, bullet)) {
                            if (bullet.type != 'impulse')bullet.ttl = 0
                            let decider = kontra.randInt(0, player.stats.primary.lifesteal.chance)
                            if (decider == 1 && player.stats.primary.lifesteal.active && enemy.stats.base.trigger) {
                                player.stats.base.health += player.stats.primary.lifesteal.heal
                                createIntense(player.x, player.y, kontra.randInt(-1, 1), -1, 5, 5, '#bfaaff', 200, 1, 0, 'gravity')
                                createIntense(player.x, player.y, kontra.randInt(-1, 1), -1, 5, 5, '#bfaaff', 200, 1, 0, 'gravity')
                                createIntense(player.x, player.y, kontra.randInt(-0.5, 0.5), -1, 2, 2, '#bfaaff', 175, 1, 0, 'gravity')
                            }
                            enemy.stats.base.health -= bullet.stats.damage
                            if (bullet.stats.push && enemy.type != 'boss') {
                                angle = kontra.angleToTarget(enemy, player) - kontra.degToRad(90)
                                if (enemy.dx > -3) enemy.dx -= Math.cos(angle)
                                if (enemy.dy > -3) enemy.dy -= Math.sin(angle)
                            }
                            if (player.stats.primary.poison.active && !enemy.poisoned) enemy.poisoned = true
                            if (player.stats.primary.ignite.active && !enemy.ignited) {
                                enemy.ignited = true
                                ignitedEnemies += 1
                                kontra.setStoreItem('ignitedEnemies',ignitedEnemies)
                            }
                            enemyDead(enemy)
                            
                        }
                    })
                }*/
                
                if (kontra.keyPressed('esc')) {
                    window.location.reload()
                }
                
                if (currentScene == camera && enemies.length >= 1)enemies.map(en => {
                    allies.map(al => {
                        if (kontra.collides(al, en) && en.type != 'boss') {
                            al.stats.base.health -= en.stats.weapons.damage
                            en.rotation -= 1
                            if (al.stats.base.health <= 0) {
                                al.ttl = 0
                                if (al.type == 'drone') activeDrones -= 1
                                if (al.type == 'turret') activeTurrets -= 1
                            }
                        }
                        if (kontra.collides(al, en) && en.type == 'boss') {
                            if (al != player) {
                                al.ttl = 0
                                if (al.type == 'drone') activeDrones -= 1
                                if (al.type == 'turret') activeTurrets -= 1
                            } else {
                                if (al.x < en.x) {
                                    en.stats.base.health -= player.stats.primary.damage / 2
                                    al.stats.base.health -= 0.3
                                    al.x -= 6
                                }
                                if (al.x > en.x){
                                    en.stats.base.health -= player.stats.primary.damage / 2
                                    al.stats.base.health -= 0.3
                                    al.x += 6
                                }
                                if (al.y < en.y){
                                    al.stats.base.health -= 0.3
                                    en.stats.base.health -= player.stats.primary.damage / 2
                                    al.y -= 6
                                }
                                if (al.y > en.y){
                                    en.stats.base.health -= player.stats.primary.damage / 2
                                    al.stats.base.health -= 0.3
                                    al.y += 6
                                }
                                if (al == player) healthBar.opacity += 1
                            }
                        }
                    })
                })
                if (currentScene == camera)staticTiles.map(tile => {
                    if (tile.dest) {
                        if (kontra.collides(tile, player)) {
                            player.x = tile.dest.x
                            player.y = tile.dest.y
                            if (tile.camT) currentLook = tile.dest
                            if (tile.x == storyTeleporter.x && tile.y == storyTeleporter.y) spawning = true
                            for (let i = 0; i < 25; i++) createIntense(player.x, player.y, kontra.randInt(-5, 5), kontra.randInt(-3, 3), 3, 3, tile.color, kontra.randInt(150, 250), 1, 0, 'gravity')
                        }
                    }
                })
                
                ct = ct.filter(c => c.isAlive())
                bullets = bullets.filter(b => b.isAlive())
                enemies = enemies.filter(e => e.isAlive())
                allies = allies.filter(a => a.isAlive())
                allyDrones = allyDrones.filter(a => a.isAlive())
                activeTiles = activeTiles.filter(a => a.isAlive())
                spawners = spawners.filter(a => a.isAlive())
                hoverText = hoverText.filter(a => a.isAlive())
                
                is = is.filter(i => i.isAlive())
                
                cleanupHealthbars = cleanupHealthbars.filter(a => a.isAlive())
                
                //cleanupBOSS1 = cleanupBOSS1.filter(a => a.isAlive())
                //cleanupBOSS2 = cleanupBOSS2.filter(a => a.isAlive())
                //cleanupBOSS3 = cleanupBOSS3.filter(a => a.isAlive())
                //cleanupBOSS4 = cleanupBOSS4.filter(a => a.isAlive())
                //cleanupBOSS5 = cleanupBOSS5.filter(a => a.isAlive())
                
                camera.objects.map(obj => {
                    if (obj.ttl <= 0) camera.remove(obj)
                })
                
                hovering = false
                overrideHover = false
            }, 
            render: (dt) => { currentScene.render(dt) }
        })
        loop.start()
